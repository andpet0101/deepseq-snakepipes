try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

####################
# Config/Parameter #
####################

###########
# Targets #
###########

DESEQ_TARGETS = ["de-analysis/"+PROJECT+".deseq-config.csv","de-analysis/"+PROJECT+".deseq_report.r","de-analysis/"+PROJECT+".deseq_report.sh","de-analysis/"+PROJECT+".condition.csv","de-analysis/"+PROJECT+".contrast.csv","de-analysis/"+PROJECT+".genes.csv"]


#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")
localrules: copy_deseq_contrast_csv,create_deseq_conditions_csv,prepare_deseq_config

rule do_deg_analysis:
	input:
		DESEQ_TARGETS

rule prepare_deseq_report_scripts:
	params:
		template="/group/sequencing/Bfx/scripts/common/deseq_report.r",
		config="de-analysis/"+PROJECT+".deseq-config.csv"
	output:
		"de-analysis/"+PROJECT+".deseq_report.r",
		"de-analysis/"+PROJECT+".deseq_report.sh"
	run:
		from shutil import copyfile
		copyfile(params.template,output[0])
		with open(output[1],"w") as outstream:
			outstream.write("#!/bin/bash\n\n")
			outstream.write("R CMD BATCH '--args " + os.path.basename(params.config) + "' " + os.path.basename(output[0]) + " /dev/stderr | tee -a " + PROJECT + ".deseq_report.log\n")

rule prepare_deseq_config:
	output:
		"de-analysis/"+PROJECT+".deseq-config.csv"
	params:
		template="/group/sequencing/Bfx/scripts/common/dsp/dsp/files/deseq-config.csv"
	run:
		
		with open(params.template,'r') as input:
			with open(output[0], 'w') as outstream:
				for line in input:
					fields = line.strip().split('\t')
					if fields[0] == "workingdir":
						fields[1] = os.getcwd() + "/de-analysis"
					elif fields[0] == "pdfdir":
						fields[1] = os.getcwd() + "/de-analysis/pdf"
					elif fields[0] == "pngdir":
						fields[1] = os.getcwd() + "/de-analysis/png"
					elif fields[0] == "countfile":
						fields[1] = os.getcwd() + "/genecount/" + PROJECT + "." + REFERENCE_CFG["version"] + ".e" + ANNOTATION_CFG["version"] + ".txt"
					elif fields[0] == "conditionfile":
						fields[1] = PROJECT+".condition.csv"
					elif fields[0] == "contrastfile":
						fields[1] = PROJECT+".contrast.csv"
					elif fields[0] == "bfxid":
						fields[1] = PROJECT
					elif fields[0] == "species":
						fields[1] = SPECIES
					elif fields[0] == "ensembl":
						fields[1] = ANNOTATION_CFG["version"]
					elif fields[0] == "plotcounts":
						fields[1] = PROJECT+".genes.csv"
					if line[0]=="#":
						outstream.write(line)
					else:
						outstream.write(fields[0]+"\t"+fields[1]+"\t"+fields[2]+"\n")
					
						

rule create_deseq_condition_contrast_csv:
	output:
		"de-analysis/"+PROJECT+".contrast.csv",
		"de-analysis/"+PROJECT+".condition.csv"
	params:
		template="/group/sequencing/Bfx/scripts/common/dsp/dsp/files/deseq-contrast.csv"
	run:
		from shutil import copyfile
		copyfile(params.template,output[0])
		with open(output[1], 'w') as outstream:
			outstream.write("Sample\tCond\n")
			for l in INPUT_CFG["libraries"]:
				s = re.sub('^L\d+_','',l)
				outstream.write(s+"\t\n")

rule create_deseq_empty_gene_list:
	output:
		"de-analysis/"+PROJECT+".genes.csv"
	shell:
		"touch {output}"


