try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

include: "do_data_cleaning.snakemake"

####################
# Config/Parameter #
####################

# miRNA reads usually have to be trimmed
if not CLEAN_DATA_CFG:
	raise WorkflowError("Please provide an clean_data configuration for preprocessing of reads!")

# reference configuration
if not REFERENCE_CFG:
	raise WorkflowError("Please provide a reference configuration!")

# annotation configuration
if not ANNOTATION_CFG:
	raise WorkflowError("Please provide an annotation configuration!")

# aligner configuration for bowtie is configured by default but aligner.index and aligner.index_directory can be explicitly changed
ALIGNER_CFG["binary"] = "bowtie"
if "index_directory" not in ALIGNER_CFG:
	ALIGNER_CFG["index_directory"] = "/projects/seq-work/user/pipeline/bowtie1"
if "index" not in ALIGNER_CFG:
	ALIGNER_CFG["index"] = REFERENCE_CFG["version"]
if not os.path.exists(ALIGNER_CFG["index_directory"]+"/"+ALIGNER_CFG["index"]+".1.ebwt"):
	raise WorkflowError("Could not find the bowtie1 genome index files for "+ALIGNER_CFG["index"]+" (aligner.index) in "+ALIGNER_CFG["index_directory"]+" (aligner.index_directory)!")

# mirdeep_star configuration
MIRDEEP_STAR_CFG = config.get("mirdeep_star",dict())

if "genome_dir" not in MIRDEEP_STAR_CFG:
	if "version" in MIRDEEP_STAR_CFG and os.path.exists("/projects/seq-work/user/pipeline/mirdeep_star/"+SPECIES+"/"+MIRDEEP_STAR_CFG["version"]):
		MIRDEEP_STAR_CFG["genome_dir"] = "/projects/seq-work/user/pipeline/mirdeep_star/"+SPECIES
	elif REFERENCE_CFG and "version" in REFERENCE_CFG and os.path.exists("/projects/seq-work/user/pipeline/mirdeep_star/"+SPECIES+"/"+REFERENCE_CFG["version"]):
		MIRDEEP_STAR_CFG["version"] = REFERENCE_CFG["version"]
		MIRDEEP_STAR_CFG["genome_dir"] = "/projects/seq-work/user/pipeline/mirdeep_star/"+SPECIES
	else:
		raise WorkflowError("Please provide the mirdeep* directory (which contains subdirectories of mirdeep* formatted genomes) by mirdeep_star.genome_dir.")
else:
	if "version" not in MIRDEEP_STAR_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG and os.path.exists(MIRDEEP_STAR_CFG["genome_dir"]+"/"+REFERENCE_CFG["version"]):
		MIRDEEP_STAR_CFG["version"] = REFERENCE_CFG["version"]
	else:
		raise WorkflowError("Please provide the name of the mirdeep* formatted genome (which has to be a subdirectory of mirdeep_star.genome_dir) by mirdeep_star.version.")

if not os.path.exists(MIRDEEP_STAR_CFG["genome_dir"]+"/"+MIRDEEP_STAR_CFG["version"]):
	raise WorkflowError("Could not find the mirdeep* formatted genome directory "+MIRDEEP_STAR_CFG["version"]+" in the mirdeep* directory "+MIRDEEP_STAR_CFG["genome_dir"]+"!")

# path to mirdeep* jar
if "mirdeep_star" not in PROGRAM_CFG:
	PROGRAM_CFG["mirdeep_star"]="/group/sequencing/Bfx/scripts/extern/mirdeep_star/MD.jar"
		

###########
# Targets #
###########

MIRNA_ANALYSIS_DATA = []
for l in LIBRARIES:
	MIRNA_ANALYSIS_DATA.append("miRNA/"+l+".filtered.result.gz")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".mirdeep_star.csv")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".filtered_mapping.txt")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".rRNA.txt")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".tRNA.txt")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".otherRNA.txt")
	MIRNA_ANALYSIS_DATA.append("miRNA/report/data/"+PROJECT+"_"+l+".miRNA_data.txt")

MIRNA_ANALYSIS_PLOTS = []
for p in["reads_filter_status1.pdf","reads_filter_status2.pdf","reads_filter_status3.pdf","reads_filter_status4.pdf","reads_filter_status_length_distribution.pdf","filtered_reads_genomic_mapping1.pdf","filtered_reads_genomic_mapping2.pdf","number_of_profiled_mature_miRNAs.pdf","number_of_profiled_mature_miRNAs_by_expression_level.pdf","mature_miRNAs_ranked_by_expression_level_plot.pdf","known_mature_miRNA_expression_pearson_correlation.pdf","known_mature_miRNA_expression_spearman_correlation.pdf","novel_mature_miRNA_expression_spearman_correlation.pdf","novel_mature_miRNA_expression_pearson_correlation.pdf"]:
	MIRNA_ANALYSIS_PLOTS.append("miRNA/report/pdf/"+PROJECT+"_"+p)
MIRNA_ANALYSIS_TARGETS = MIRNA_ANALYSIS_DATA + MIRNA_ANALYSIS_PLOTS

#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")

rule do_miRNA_analysis:
	input:
		CLEAN_DATA_TARGETS,
		MIRNA_ANALYSIS_TARGETS
		
### analyse/plot results with R ###
rule summarise_miRNA_analysis:
	input:
		MIRNA_ANALYSIS_DATA
	output:
		MIRNA_ANALYSIS_PLOTS
	log:
		"miRNA/log/summarise_miRNA_analysis.log"
	shell:
		"\n\t\t("+module_load("R")+
		"""
		summarise_miRNA_analysis.R {PROJECT} miRNA/report/data miRNA/report/pdf) >& {log}
		"""


### map to genome and analyse miRNA with mirdeep  ###
rule parse_mirdeep_star_results:
	input:
		res="miRNA/{basename}.filtered.result.gz",
		known="miRNA/known_miRNA.gff"
	output:
		report="miRNA/report/data/"+PROJECT+"_{basename}.mirdeep_star.csv"
	log:
		"miRNA/log/{basename}.parse_mirdeep_star_results.log"
	shell:
		"""
		gunzip -cd {input.res} | parse_mirdeep_star_results.pl {input.known} > {output.report}
		"""

rule run_mirdeep_star:
	input:
		bam="miRNA/{basename}.filtered.bam",
		genome_dir="genome",
		targetscan_dir="targetScan"
	output:
		all="miRNA/{basename}.filtered.result.gz",
		cluster=temp("miRNA/{basename}.filtered.cluster"),
		known_result=temp("miRNA/{basename}.filtered.known_miR.result"),
		result=temp("miRNA/{basename}.filtered.result"),
		sorted_bam="miRNA/{basename}.filtered.sorted.bam"
	log:
		"miRNA/log/{basename}.run_mirdeep_star.log"
	shell:
		"""
		(java -Xmx16G -jar {PROGRAM_CFG[mirdeep_star]} -m 5 -s -50 -t 18 -l 25 -g {REFERENCE_CFG[version]} {input.bam}) >& {log}
		gzip -c miRNA/{wildcards.basename}.filtered.result > {output.all}
		"""

rule map_final_miRNA_fastq_on_genome:
	input:
		fq="miRNA/{basename}_R1.filtered.fastq.gz"
	output:
		bam="miRNA/{basename}.filtered.bam",
		bai="miRNA/{basename}.filtered.bai",
		summary="miRNA/report/data/"+PROJECT+"_{basename}.filtered_mapping.txt"
	log:
		"miRNA/log/{basename}.map_filtered_miRNA_fastq_on_genome.log"
	threads:
		8
	shell:
		"\n\t\t("+module_load("bowtie","samtools")+
		"""
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		gunzip -cd {input.fq} | {ALIGNER_CFG[binary]} -l 15 -v 2 -e 999 --nomaqround --best --strata -a -m 100 --chunkmbs 256 -p ${{NSLOTS:-{threads}}} -S --sam-RG ID:$RG --sam-RG LB:$LB --sam-RG SM:$SM {ALIGNER_CFG[index_directory]}/{ALIGNER_CFG[index]} - | \
		samtools sort -O bam -T ${{TMPDIR:-.}}/{wildcards.basename} -o {output.bam} -@ 2 -;samtools index {output.bam} {output.bai}) 2>&1 | tee {output.summary} >& {log}
		"""

rule remove_too_long_reads_from_miRNA_fastq:
	input:
		"miRNA/{basename}_R1.wo_rRNA_tRNA_otherRNA.fastq.gz"
	output:
		fq=temp("miRNA/{basename}_R1.filtered.fastq.gz"),
		summary="miRNA/report/data/"+PROJECT+"_{basename}.toolong.txt"
	log:
		"miRNA/log/{basename}.remove_too_long_reads_from_miRNA_fastq.log"
	shell:
		"\n\t\t("+module_load("cutadapt")+
		"""
		cutadapt -m 18 -M 25 --quiet -o {output.fq} --too-long-output=-  {input} | awk '{{if(NR>3){{l++;if(l%4==2){{print length($1)}}}}}}' | sort | \
		uniq -c | awk 'BEGIN{{OFS="\t";print "type","length","count"}}{{print "too long",$2,$1}}' > {output.summary}) >& {log}
		"""

rule filter_otherRNA_from_miRNA_fastq:
	input:
		bam="miRNA/{basename}.rRNA_tRNA_filtered.bam",
		bai="miRNA/{basename}.rRNA_tRNA_filtered.bai",
		bed="miRNA/otherRNA_genomic_filter.bed"
	output:
		fq=temp("miRNA/{basename}_R1.wo_rRNA_tRNA_otherRNA.fastq.gz"),
		summary="miRNA/report/data/"+PROJECT+"_{basename}.otherRNA.txt",
		clean="miRNA/report/data/"+PROJECT+"_{basename}.miRNA_data.txt"
	log:
		"miRNA/log/{basename}.filter_otherRNA_from_miRNA_fastq.log"
	threads:
		8
	shell:
		"\n\t\t("+module_load("bowtie","samtools","bedtools")+
		"""
		bedtools intersect -a {input.bam} -b {input.bed} -s -v | bedtools bamtofastq -i stdin -fq /dev/stdout | gzip -c > {output.fq}
		bedtools intersect -a {input.bam} -b {input.bed} -s -wa -wb -bed | awk '{{OFS="\\t";print $4,$3-$2,$16}}' | \
		sort -k 1,1 | awk '{{print $3,$2}}' | sort -k 1,1 -k 2,2n | uniq -c | awk 'BEGIN{{OFS="\\t";print "type","length","count"}}{{print $2,$3,$1}}' > {output.summary}
		gunzip -cd {output.fq} | awk 'NR%4==2{{print length($0)}}' | sort -n | uniq -c | awk 'BEGIN{{OFS="\\t";print "type","length","count"}}{{print "clean",$2,$1}}' > {output.clean}) >& {log}
		"""	

rule map_rRNA_tRNA_filtered_miRNA_fastq_on_genome:
	input:
		fq="miRNA/{basename}_R1.wo_rRNA_tRNA.fastq.gz"
	output:
		bam=temp("miRNA/{basename}.rRNA_tRNA_filtered.bam"),
		bai=temp("miRNA/{basename}.rRNA_tRNA_filtered.bai")
	log:
		"miRNA/log/{basename}.map_rRNA_tRNA_filtered_miRNA_fastq_on_genome.log"
	threads:
		8
	params:
		aligner_binary = ALIGNER_CFG["binary"]
	shell:
		"\n\t\t("+module_load("bowtie","samtools")+
		"""		
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		gunzip -cd {input.fq} | {params.aligner_binary} -l 15 -n 0 -e 999 --nomaqround --best --strata -a -m 1 --chunkmbs 256 -p ${{NSLOTS:-{threads}}} -S --sam-RG ID:$RG --sam-RG LB:$LB --sam-RG SM:$SM {ALIGNER_CFG[index_directory]}/{ALIGNER_CFG[index]} - | \
		samtools sort -O bam -T ${{TMPDIR:-.}}/{wildcards.basename} -o {output.bam} -@ 2 -;samtools index {output.bam} {output.bai}) >& {log}
		"""

rule create_otherRNA_genomic_filter_bed:
	input:
		"miRNA/known_miRNA.gff"
	output:
		"miRNA/otherRNA_genomic_filter.bed"
	log:
		"miRNA/log/create_otherRNA_genomic_filter_bed.log"
	params:
		annotation=ANNOTATION_CFG["gtf"]
	shell:
		"\n\t\t("+module_load("bedtools","cufflinks","perl")+
		"""
		cat {params.annotation} | grep -v "^ERCC" | awk '$3=="exon"' | egrep --color=never -v 'gene_biotype "(miRNA)"' | egrep --color=never 'transcript_support_level "1"' | \
		perl -naF"/\\t/" -e 'chomp($F[8]);$F[8]=~s/.+gene_biotype\\s"([^"]+)".+/$1/;print join("\\t",@F)."\\n"' | awk '{{OFS="\\t";print $1,$4,$5,$9,$6,$7}}' | \
		bedtools sort -i stdin | bedtools merge -c 4,5,6 -o first,first,first | bedtools intersect -a stdin -b miRNA/known_miRNA.gff -s -v | bedtools sort -i stdin > {output}) >& {log}		
		"""

rule filter_tRNA_from_miRNA_fastq:
	input:
		fq="miRNA/{basename}_R1.wo_rRNA.fastq.gz",
		index="miRNA/tRNA.1.ebwt"
	output:
		fq=temp("miRNA/{basename}_R1.wo_rRNA_tRNA.fastq.gz"),
		summary="miRNA/report/data/"+PROJECT+"_{basename}.tRNA.txt"
	log:
		"miRNA/log/{basename}.filter_tRNA_from_miRNA_fastq.log"
	threads:
		8
	params:
		aligner_binary = ALIGNER_CFG["binary"]
	shell:
		"\n\t\t("+module_load("bowtie")+
		"""		
		gunzip -cd {input.fq} | {params.aligner_binary} -l 15 -n 0 --nomaqround -p ${{NSLOTS:-{threads}}} -k 1 -S --sam-nohead --un=miRNA/{wildcards.basename}_R1.wo_rRNA_tRNA.fastq miRNA/tRNA - /dev/stdout | awk '$3!="*"{{print length($10)}}' | sort | uniq -c | awk 'BEGIN{{OFS="\\t";print "type","length","count"}}{{print "tRNA",$2,$1}}' > {output.summary}) >& {log}
		gzip miRNA/{wildcards.basename}_R1.wo_rRNA_tRNA.fastq
		"""

rule filter_rRNA_from_miRNA_fastq:
	input:
		fq="fastq/{basename}_R1.clean.fastq.gz",
		index="miRNA/rRNA.1.ebwt"
	output:
		fq=temp("miRNA/{basename}_R1.wo_rRNA.fastq.gz"),
		summary="miRNA/report/data/"+PROJECT+"_{basename}.rRNA.txt"
	log:
		"miRNA/log/{basename}.filter_rRNA_from_miRNA_fastq.log"
	threads:
		8
	params:
		aligner_binary = ALIGNER_CFG["binary"]
	shell:
		"\n\t\t("+module_load("bowtie")+
		"""	
		gunzip -cd {input.fq} | {params.aligner_binary} -l 15 -n 0 --nomaqround -p ${{NSLOTS:-{threads}}} -k 1 -S --sam-nohead --un=miRNA/{wildcards.basename}_R1.wo_rRNA.fastq miRNA/rRNA - /dev/stdout | awk '$3!="*"{{print length($10)}}' | sort | uniq -c | awk 'BEGIN{{OFS="\\t";print "type","length","count"}}{{print "rRNA",$2,$1}}' > {output.summary}) >& {log}
		gzip miRNA/{wildcards.basename}_R1.wo_rRNA.fastq
		"""

rule prepare_rRNA_bowtie1_index:
	output:
		index="miRNA/rRNA.1.ebwt",
		fa="miRNA/rRNA.fa"
	log:
		"miRNA/log/build_rRNA_bowtie_index.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		annotation=ANNOTATION_CFG["gtf"]
	shell:
		"\n\t\t("+module_load("bowtie","bedtools")+
		"""
		cat {params.annotation} | egrep --color=never 'gene_biotype "(rRNA|Mt_rRNA)"' | awk '$3=="gene"' | perl -pe 's/gene_id \"(\S+)\".+/$1/' | awk 'BEGIN{{FS=OFS="\\t"}}{{print $1,$4-1,$5,$9,".",$7}}' | bedtools getfasta -fi {params.reference} -bed stdin -fullHeader -name -s > miRNA/rRNA.fa
		bowtie-build miRNA/rRNA.fa miRNA/rRNA) >& {log}
		"""

rule prepare_tRNA_bowtie1_index:
	output:
		index="miRNA/tRNA.1.ebwt",
		fa="miRNA/tRNA.fa"
	log:
		"miRNA/log/build_tRNA_bowtie_index.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		annotation=ANNOTATION_CFG["gtf"]
	shell:
		"\n\t\t("+module_load("bowtie","bedtools")+
		"""
		cat {params.annotation} | egrep --color=never 'gene_biotype "Mt_tRNA"' | awk '$3=="gene"' | perl -pe 's/gene_id \"(\S+)\".+/$1/' | awk 'BEGIN{{FS=OFS="\\t"}}{{print $1,$4-1,$5,$9,".",$7}}' | bedtools getfasta -fi {params.reference} -bed stdin -fullHeader -name -s > miRNA/tRNA.fa
		bowtie-build miRNA/tRNA.fa miRNA/tRNA) >& {log}
		"""

rule get_known_miRNA_gff:
	input:
		"genome"
	output:
		"miRNA/known_miRNA.gff"
	params:
		reference=REFERENCE_CFG["version"]
	shell:
		"""
		cat genome/{params.reference}/miRBase/knownMiR.gff3 | awk '$3=="miRNA"' > {output}
		"""

rule link_mirdeep_star_directories:
	input:
		genome_dir=MIRDEEP_STAR_CFG["genome_dir"]+SPECIES,
		targetscan_dir="/group/sequencing/Bfx/scripts/extern/mirdeep_star/targetScan"
	output:
		genome_dir="genome",
		targetscan_dir="targetScan",
	shell:
		"""
		ln -snf {input.genome_dir} {output.genome_dir}
		ln -snf {input.targetscan_dir} {output.targetscan_dir}
		"""	

