try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

from snakemake.utils import R

####################
# Config/Parameter #
####################

# default parameter/config for gecko (override by own config if needed)  ############
if not CLEAN_DATA_CFG:
	CLEAN_DATA_CFG = {"parameter" : "gecko"}

include: "do_data_cleaning.snakemake"
include: "do_fastqc.snakemake"

# parameter/config for gecko  ############
GECKO_CFG = config.get("gecko",dict())

if "library" not in GECKO_CFG:
	raise WorkflowError("Please provide a GeCKO library with gecko.library!")
if not os.path.exists(GECKO_CFG["library"]):
	raise WorkflowError("Specified GeCKO library does not exist!")
if "experiments" not in GECKO_CFG:
	raise WorkflowError("Please provide GeCKO experiments with gecko.experiments (hash containing experiment1, experiment2, ... where each element has a test,controls,treatments)!")

GECKO_EXPERIMENTS = GECKO_CFG["experiments"]
GECKO_RRA_EXPERIMENTS = []
GECKO_MLE_EXPERIMENTS = []
GECKO_SAMPLES = []

for experiment in list(GECKO_EXPERIMENTS.keys()):
	if "test" not in GECKO_EXPERIMENTS[experiment] or GECKO_EXPERIMENTS[experiment]["test"] not in ["mle","rra"]:
		raise WorkflowError("Please use rra or mle as test for "+experiment+".test!")
	if GECKO_EXPERIMENTS[experiment]["test"]=="mle":
		GECKO_MLE_EXPERIMENTS.append(experiment)
	if GECKO_EXPERIMENTS[experiment]["test"]=="rra":
		GECKO_RRA_EXPERIMENTS.append(experiment)
	if "controls" not in GECKO_EXPERIMENTS[experiment]:
		raise WorkflowError("Please provide a comma-separated list of samples (without library id) used as control with "+experiment+".controls!")
	if "treatments" not in GECKO_EXPERIMENTS[experiment]:
		raise WorkflowError("Please provide a comma-separated list of samples (without library id) used as treatment with "+experiment+".treatments!")
	if "selection" not in GECKO_EXPERIMENTS[experiment] or GECKO_EXPERIMENTS[experiment]["selection"] not in ["positive","negative"]:
		raise WorkflowError("Please use positive or negative as selection method for "+experiment+".selection!")
	GECKO_SAMPLES.extend([s.strip() for s in GECKO_EXPERIMENTS[experiment]["controls"].split(",")])
	GECKO_SAMPLES.extend([s.strip() for s in GECKO_EXPERIMENTS[experiment]["treatments"].split(",")])

for sample in GECKO_SAMPLES:
	if sample not in SAMPLES:
		raise WorkflowError("Could not find a fastq file with the sample id \""+sample+"\"!")

CALCULATE_EFFICIENCY = len(GECKO_MLE_EXPERIMENTS)>0 and REFERENCE_CFG and "version" in REFERENCE_CFG and REFERENCE_CFG["version"] in ["mm9","mm10","hg38","hg19"]	

###########
# Targets #
###########

GECKO_TARGETS = []

for experiment in GECKO_RRA_EXPERIMENTS:
	GECKO_TARGETS.append("mageck/tests/rra/"+experiment+".gene_summary.txt")
	GECKO_TARGETS.append("mageck/tests/rra/"+experiment+".sgrna_summary.txt")
	GECKO_TARGETS.append("mageck/tests/rra/"+experiment+".vispr.yaml")
for experiment in GECKO_MLE_EXPERIMENTS:
	GECKO_TARGETS.append("mageck/tests/mle/"+experiment+".gene_summary.txt")
	GECKO_TARGETS.append("mageck/tests/mle/"+experiment+".sgrna_summary.txt")
	GECKO_TARGETS.append("mageck/tests/mle/"+experiment+".vispr.yaml")


#########
# Rules #
#########

rule do_gecko_screen:
	input:
		GECKO_TARGETS,
		"mageck/run_vispr_visualisation.sh"

# these rules prepares configs for the vispr visualisation
rule prepare_vispr_shell:
	output:
		"mageck/run_vispr_visualisation.sh"
	run:
		with open(output[0], 'w') as outstream:
			outstream.write("#!/bin/sh\n\n")
			outstream.write("vispr server tests/*/*vispr.yaml")
	
rule prepare_vispr_config:
	input:
		qc=["mageck/qc/" + l + "_R1.clean_fastqc.txt" for l in LIBRARIES],
		annotation="mageck/sgrnas.bed",
		counts="mageck/count/all.count_normalized.txt",
		mapstats="mageck/count/all.countsummary.txt",
		results="mageck/tests/{test}/{experiment}.gene_summary.txt"
	output:
		"mageck/tests/{test}/{experiment}.vispr.yaml"
	log:
		"mageck/tests/{test}/log/{experiment}.vispr.log"
	run:
		with open(output[0], 'w') as outstream:
				if REFERENCE_CFG and "version" in REFERENCE_CFG:
					outstream.write("assembly: "+REFERENCE_CFG["version"]+"\n")
				outstream.write("fastqc:\n")
				samples = {}
				for f in input.qc:
					s = re.sub("^L\d+_","",re.sub("_R1\.clean_fastqc\.txt","",os.path.basename(f)))
					if s not in samples:
						samples[s] = []
					samples[s].append(f)
				for s in GECKO_CFG["experiments"][wildcards.experiment]["controls"].split(",") + GECKO_CFG["experiments"][wildcards.experiment]["treatments"].split(","):
					outstream.write("  "+s+":\n")
					for f in samples[s]:
						outstream.write("  - ../../qc/"+os.path.basename(f)+"\n")
				outstream.write("experiment: "+wildcards.experiment+"\n")
				outstream.write("sgrnas:\n")
				if CALCULATE_EFFICIENCY:
					outstream.write("  annotation: ../../"+os.path.basename(input.annotation)+"\n")
				outstream.write("  counts: ../../count/"+os.path.basename(input.counts)+"\n")
				outstream.write("  mapstats: ../../count/"+os.path.basename(input.mapstats)+"\n")
				outstream.write("species: "+SPECIES+"\n")
				outstream.write("targets:\n")
				outstream.write("  genes: true\n")
				outstream.write("  results: "+os.path.basename(input.results)+"\n")
		

# input is generated by rules from do_fastqc.snakemake
rule prepare_fastqc_for_vispr:
	input:
		"fastqc/report/data/{basename}.clean_fastqc.txt"
	output:
		"mageck/qc/{basename}.clean_fastqc.txt"
	shell:
		"""
		cp {input} {output}
		"""

# rules for the actual gecko screen
if CALCULATE_EFFICIENCY:
	rule do_mageck_mle_test:
		input:
			counts="mageck/count/all.count.txt",
			annotation="mageck/sgrnas.bed",
			designmatrix="mageck/tests/mle/{experiment}.design.txt",
			controls="mageck/gecko_library_control_sgRNAs.lst"
		output:
			"mageck/tests/mle/{experiment}.gene_summary.txt",
			"mageck/tests/mle/{experiment}.sgrna_summary.txt"
		log:
			"mageck/tests/mle/log/{experiment}.log"
		params:
			remove_zero=lambda wildcards: "both" if GECKO_CFG["experiments"][wildcards.experiment]["selection"] == "positive" else "none"
		shell:
			"\n\t\t("+module_load("mageck","R")+		
			"""
			mageck mle --output-prefix mageck/tests/mle/{wildcards.experiment} --sgrna-eff-name-column 3 --sgrna-eff-score-column 4 --sgrna-efficiency mageck/sgrnas.bed --genes-var 0 \\
			--count-table {input.counts} --design-matrix {input.designmatrix} --remove-zero {params.remove_zero} --control-sgrna {input.controls} --norm-method control) >& {log}
			"""
else:
	rule do_mageck_mle_test:
		input:
			counts="mageck/count/all.count.txt",
			designmatrix="mageck/tests/mle/{experiment}.design.txt",
			controls="mageck/gecko_library_control_sgRNAs.lst"
		output:
			"mageck/tests/mle/{experiment}.gene_summary.txt",
			"mageck/tests/mle/{experiment}.sgrna_summary.txt"
		log:
			"mageck/tests/mle/log/{experiment}.log"
		params:
			remove_zero=lambda wildcards: "both" if GECKO_CFG["experiments"][wildcards.experiment]["selection"] == "positive" else "none"
		shell:
			"\n\t\t("+module_load("mageck","R")+
			"""
			mageck mle --output-prefix mageck/tests/mle/{wildcards.experiment} --genes-var 0 --count-table {input.counts} --design-matrix {input.designmatrix} \\
			--remove-zero {params.remove_zero} --control-sgrna {input.controls} --norm-method control) >& {log}
			"""

rule create_mageck_mle_designmatrix:
	output:
		"mageck/tests/mle/{experiment}.design.txt"
	run:
		from shutil import copyfile
		if "designmatrix" in GECKO_CFG["experiments"][wildcards.experiment] and os.path.exists(GECKO_CFG["experiments"][wildcards.experiment]["designmatrix"]):
			copyfile(GECKO_CFG["experiments"][wildcards.experiment]["designmatrix"],output[0])
		else:
			with open(output[0], 'w') as outstream:
				outstream.write("Samples\tbaseline\tTest\n")
				for s in GECKO_CFG["experiments"][wildcards.experiment]["controls"].split(","):
					outstream.write(s+"\t1\t0\n")
				for s in GECKO_CFG["experiments"][wildcards.experiment]["treatments"].split(","):
					outstream.write(s+"\t1\t1\n")

rule do_mageck_rra_test:
	input:
		counts="mageck/tests/rra/{experiment}.filtered_counts.txt",
		controls="mageck/gecko_library_control_sgRNAs.lst"
	output:
		"mageck/tests/rra/{experiment}.gene_summary.txt",
		"mageck/tests/rra/{experiment}.sgrna_summary.txt"
	log:
		"mageck/tests/rra/log/{experiment}.log"
	params:
		controls=lambda wildcards: GECKO_CFG["experiments"][wildcards.experiment]["controls"],
		treatments=lambda wildcards: GECKO_CFG["experiments"][wildcards.experiment]["treatments"],
		remove_zero=lambda wildcards: "none" if GECKO_CFG["experiments"][wildcards.experiment]["selection"] == "positive" else "none"
	shell:
		"\n\t\t("+module_load("mageck","R")+		
		"""
		mageck test --output-prefix mageck/tests/rra/{wildcards.experiment} --count-table {input.counts} --treatment-id {params.treatments} --control-id {params.controls} \\
		--remove-zero {params.remove_zero} --control-sgrna {input.controls} --norm-method median) >& {log}
		"""

rule annotate_gecko_library:
	input:
		csv="mageck/gecko_library.csv"
	output:
		"mageck/sgrnas.bed"
	log:
		"mageck/log/annotate_gecko_library.log"
	shell:
		"""
		(mageck-vispr annotate-library {input} --sgrna-len {GECKO_CFG[sgRNA_len]} --assembly {REFERENCE_CFG[version]} > {output}) >& {log}
		"""

rule filter_counts_for_experiment:
	input:
		"mageck/count/all.count.txt"
	output:
		"mageck/tests/rra/{experiment}.filtered_counts.txt"
	params:
		controls=lambda wildcards: GECKO_CFG["experiments"][wildcards.experiment]["controls"],
		treatments=lambda wildcards: GECKO_CFG["experiments"][wildcards.experiment]["treatments"]
	log:
		"mageck/tests/rra/{experiment}.filtered_counts.log"
	shell:
		"\n\t\t("+module_load("R")+
		"""
		filter_mageck_counts_for_experiment.R {input} {params.treatments} {params.controls} 1 {output} ) >& {log}
		"""

rule count_with_mageck:
	input:
		fqs=["fastq" + "/" + l + "_R1.final.fastq.gz" for l in LIBRARIES],
		csv="mageck/gecko_library.csv"
	output:
		"mageck/count/all.count.txt",
		"mageck/count/all.count_normalized.txt",
		"mageck/count/all.countsummary.txt"
	log:
		"mageck/count/log/count_with_mageck.log"	
	shell:
		"\n\t\t("+module_load("mageck","R")+		
		"""	
		mageck count --output-prefix mageck/count/all --list-seq {input.csv} --fastq {input.fqs} --unmapped-to-file --sample-label """+(",".join(SAMPLES))+""" ) >& {log}
		"""

rule rescue_gecko_sgRNA_reads:
	input:
		fq="fastq/{basename}.clean.fastq.gz",
		csv="mageck/gecko_library.csv"
	output:
		"fastq/{basename}.final.fastq.gz"
	log:
		"fastq/log/{basename}.rescue_gecko_sgRNA_reads.log"
	shell:
		"""
		#cp {input.fq} {output}
		(rescue_gecko_sgRNA_reads.pl {input.fq} {input.csv} | gzip -c > {output}) >& {log}
		"""

rule list_control_sgRNAs:
	input:
		"mageck/gecko_library.csv"
	output:
		"mageck/gecko_library_control_sgRNAs.lst"
	shell:
		"""
		cat {input} | awk 'BEGIN{{FS=","}}$3~/Control/{{print $1}}' > {output}
		"""

rule cp_gecko_library:
	input:
		GECKO_CFG["library"]
	output:
		"mageck/gecko_library.csv"
	shell:
		"""
		cp {input} {output}
		"""


