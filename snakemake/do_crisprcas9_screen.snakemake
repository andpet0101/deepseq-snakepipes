1. 
module load apps/cutadapt

cutadapt -a GTTTTAGAGCTAGAAATAGC -O 20 -e 0.05 L11704_L929_K_R1.fastq.gz |  cutadapt -a GTTTTAGAGCTAGAAATAGC -O 20 -e 0.05 GTGGAAAGGACGAAACACCG - > L11704_L929_K_R1.trimmed.fastq
cutadapt -a GTTTTAGAGCTAGAAATAGC -O 20 -e 0.05 L11705_L929_TZ_R1.fastq |  cutadapt -a GTTTTAGAGCTAGAAATAGC -O 20 -e 0.05 GTGGAAAGGACGAAACACCG - > L11705_L929_TZ_R1.trimmed.fastq


# the set of sgRNAs
ls GeCKOv2-A_library.fa
# the set of sgRNA contructs consisting of sequencing primer, sgRNA and chRNA (see above)
# names must match to the set of sgRNAs
ls GeCKOv2-A_library.contructs.fa

bowtie-build GeCKOv2-A_library.contructs.fa GeCKOv2-A_library.contructs
/group/sequencing/Bfx/scripts/andreasp/convert_sgRNA_seq_data_to_pseudo_sgRNA_reads.pl L11704_L929_K_R1.trimmed.fastq GeCKOv2-A_library.contructs GeCKOv2-A_library.fa > L11704_L929_K_R1.clean.fastq
/group/sequencing/Bfx/scripts/andreasp/convert_sgRNA_seq_data_to_pseudo_sgRNA_reads.pl L11705_L929_TZ_R1.trimmed.fastq GeCKOv2-A_library.contructs GeCKOv2-A_library.fa > L11705_L929_TZ_R1.clean.fastq

try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

####################
# Config/Parameter #
####################


import sys
import yaml
from mageck_vispr import postprocess_config, vispr_config, get_fastq, annotation_available


postprocess_config(config)


rule all:
    input:
        expand("results/{experiment}.vispr.yaml", experiment=config["experiments"])

rule convert_sgRNA_reads_using_gecko_library:
	input:
		fq="fastq/{basename}.trimmed.fastq.gz",
		constructs_bwt=""

	output:
		"fastq/{basename}.clean.fastq.gz"
	log:
		"fastq/log/{basename}.remove_gecko_adapters.log"
	shell:
		"\n\t\t("+module_load("bowtie")+
		"""
		convert_sgRNA_reads_using_gecko_library.pl {input.fq} {input.constructs_bwt} {input.library} | gzip -c > {output}) >& {log}
		"""

rule remove_gecko_adapters:
	input:
		"fastq/{basename}.fastq.gz"
	output:
		"fastq/{basename}.trimmed.fastq.gz"
	log:
		"fastq/log/{basename}.remove_gecko_adapters.log"
	shell:
		"\n\t\t("+module_load("cutadapt")+
		"""
		cutadapt -a GTTTTAGAGCTAGAAATAGC -O 20 -e 0.05 {input} | cutadapt -O 20 -e 0.05 -g GTGGAAAGGACGAAACACCG - | gzip -c > {output}) >& {log}
		"""

rule create_constructs_bwt_index:
	output:
		"fastq/"
	shell:
		"""
		"""
	







    
rule mageck_count:
	input:
		fastqs=[get_fastq(rep, config) for rep in config["replicates"]],
		library=config["library"]
	output:
		"mageck/count/all.count.txt",
		"mageck/count/all.count_normalized.txt",
		"mageck/count/all.countsummary.txt"
	log:
		"mageck/log/count/all.log"
        shell:
            "mageck count --output-prefix {params.prefix} "
            "--list-seq {input.library} --pdf-report "
            "--fastq {params.fastqs} --sample-label {params.labels} "
            "--trim-5 {config[sgrnas][trim-5]} 2> {log}"


if "samples" in config:
    rule fastqc:
        input:
            lambda wildcards: config["replicates"][wildcards.replicate]
        output:
            "results/qc/{replicate}"
        log:
            "logs/fastqc/{replicate}.log"
        shell:
            "mkdir -p {output}; rm -rf {output}/*; "
            "fastqc -f fastq --extract -o {output} {input} 2> {log}"


    if "adapter" in config["sgrnas"]:
        rule cutadapt:
            input:
                lambda wildcards: config["replicates"][wildcards.replicate]
            output:
                "results/trimmed_reads/{replicate}.fastq"
            shell:
                "cutadapt -a {config[sgrnas][adapter]} {input} > {output}"


    rule mageck_count:
        input:
            fastqs=[get_fastq(rep, config) for rep in config["replicates"]],
            library=config["library"]
        output:
            "results/count/all.count.txt",
            "results/count/all.count_normalized.txt",
            "results/count/all.countsummary.txt"
        params:
            labels=",".join(config["samples"].keys()),
            fastqs=" ".join(",".join(get_fastq(rep, config) for rep in replicates) for replicates in config["samples"].values()),
            prefix="results/count/all"
        log:
            "logs/mageck/count/all.log"
        shell:
            "mageck count --output-prefix {params.prefix} "
            "--list-seq {input.library} --pdf-report "
            "--fastq {params.fastqs} --sample-label {params.labels} "
            "--trim-5 {config[sgrnas][trim-5]} 2> {log}"


if "library" in config:
    rule annotate_sgrnas:
        input:
            config["library"]
        output:
            "annotation/sgrnas.bed"
        log:
            "logs/annotation/sgrnas.log"
        shell:
            "mageck-vispr annotate-library {input} "
            "--sgrna-len {config[sgrnas][len]} --assembly {config[assembly]} "
            "> {output} 2> {log}"


rule mageck_rra:
    input:
        config.get("counts", "results/count/all.count.txt")
    output:
        "results/test/{experiment}.gene_summary.txt",
        "results/test/{experiment}.sgrna_summary.txt"
    params:
        prefix="results/test/{experiment}",
        treatment=lambda wildcards: ",".join(config["experiments"][wildcards.experiment]["treatment"]),
        control=lambda wildcards: ",".join(config["experiments"][wildcards.experiment]["control"])
    log:
        "logs/mageck/test/{experiment}.log"
    shell:
        "mageck test --output-prefix {params.prefix} --pdf-report "
        "--count-table {input} --treatment-id {params.treatment} "
        "--control-id {params.control} 2> {log}"


rule mageck_mle:
    input:
        counts=config.get("counts", "results/count/all.count.txt"),
        designmatrix=lambda wildcards: config["experiments"][wildcards.experiment]["designmatrix"],
        annotation="annotation/sgrnas.bed" if annotation_available(config) else []
    output:
        "results/test/{experiment}.gene_summary.txt",
        "results/test/{experiment}.sgrna_summary.txt"
    params:
        prefix="results/test/{experiment}",
        efficiency=(
            "" if not annotation_available(config)
            else "--sgrna-eff-name-column 3 "
                 "--sgrna-eff-score-column 4 "
                 "--sgrna-efficiency annotation/sgrnas.bed"),
        update_efficiency="" if not config["sgrnas"].get("update-efficiency", False) else "--update-efficiency"
    log:
        "logs/mageck/test/{experiment}.log"
    shell:
        "mageck mle --output-prefix {params.prefix} {params.efficiency} --genes-var 0 "
        "{params.update_efficiency} --count-table {input.counts} "
        "--design-matrix {input.designmatrix} 2> {log}"


if "samples" in config:
    rule vispr:
        input:
            "annotation/sgrnas.bed" if annotation_available(config) else [],
            results="results/test/{experiment}.gene_summary.txt",
            sgrna_results="results/test/{experiment}.sgrna_summary.txt",
            counts="results/count/all.count_normalized.txt",
            mapstats="results/count/all.countsummary.txt",
            fastqc=expand("results/qc/{replicate}", replicate=config["replicates"])
        output:
            "results/{experiment}.vispr.yaml"
        run:
            vispr_config(input, output, wildcards, config)
else:
    rule vispr:
        input:
            "annotation/sgrnas.bed" if annotation_available(config) else [],
            results="results/test/{experiment}.gene_summary.txt",
            sgrna_results="results/test/{experiment}.sgrna_summary.txt",
            counts="results/count/all.count_normalized.txt"
        output:
            "results/{experiment}.vispr.yaml"
        run:
            vispr_config(input, output, wildcards, config)
