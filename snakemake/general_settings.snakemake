import time
import glob
import os
import re
import csv

# this variable prevents that this file is included multiple times
GENERAL_SETTINGS_INCLUDED = 1

##############################################################
# config file is now static and can be in YML or JSON format #
##############################################################
if os.path.exists("snakemake_config.yml"):
	configfile: "snakemake_config.yml"
elif os.path.exists("snakemake_config.json"):
	configfile: "snakemake_config.json"
else:
	raise WorkflowError("Could not find the configuration file (snakemake_config.yml/snakemake_config.json) located in this directory!")

###################################################
# parameters from the snakemake config and checks #
###################################################


# project ################
PROJECT =  config.get("project","")
if not PROJECT:
	raise WorkflowError("Please provide the project!")


# species ################
SPECIES = config.get("species","")
if not SPECIES:
	raise WorkflowError("Please provide the species!")


# reference ################
REFERENCE_CFG = config.get("reference",dict())
if REFERENCE_CFG:
	if "path" not in REFERENCE_CFG:
		if "version" in REFERENCE_CFG:
			REFERENCE_CFG["path"] = "/projects/seq-work/user/pipeline/reference/"+SPECIES+"/"+REFERENCE_CFG["version"]+"/"+REFERENCE_CFG["version"]
		else:
			raise WorkflowError("Please provide either a built-in reference via reference.version plus species OR a new reference via reference.path (full path, without .fa suffix) and reference.version!")
	for suffix in ["fa","fa.fai","dict","genome"]:
		if not os.path.exists(REFERENCE_CFG["path"]+"."+suffix):
			raise WorkflowError("Could not find the reference.path file "+REFERENCE_CFG["path"]+"."+suffix+"!")


# annotation ################
ANNOTATION_CFG = config.get("annotation",dict())
if ANNOTATION_CFG:
	if "gtf" not in ANNOTATION_CFG:
		if "version" in ANNOTATION_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG:
			ANNOTATION_CFG["gtf"] = "/projects/seq-work/user/pipeline/annotation/"+SPECIES+"/"+REFERENCE_CFG["version"]+"/EnsemblGene-"+ANNOTATION_CFG["version"]+"."+REFERENCE_CFG["version"]+".TR.gtf"
		else:
			raise WorkflowError("Please provide either a built-in annotation via annotation.version plus reference.version plus species OR a new annotation via annotation.gtf (full path) and annotation.version!")
	if not os.path.exists(ANNOTATION_CFG["gtf"]):
			raise WorkflowError("Could not find the annotation.gtf file "+ANNOTATION_CFG["gtf"]+"!")


# aligner ################
ALIGNER_CFG =  config.get("aligner",dict())
if ALIGNER_CFG:
	# program
	if "program" not in ALIGNER_CFG or ALIGNER_CFG["program"] not in ["bwa","gsnap","bowtie1"]:
		raise WorkflowError("Please use 'bwa', 'gsnap' or 'bowtie1' for aligner.program!")
	# binary
	if "binary" not in ALIGNER_CFG:
		if ALIGNER_CFG["program"] == "bwa":
			ALIGNER_CFG["binary"] = "bwa"
		elif ALIGNER_CFG["program"] == "gsnap":
			ALIGNER_CFG["binary"] = "gsnap"
		elif ALIGNER_CFG["program"] == "bowtie1":
			ALIGNER_CFG["binary"] = "bowtie"
		else:
			raise WorkflowError("Need to know the binary for alignment program "+ALIGNER_CFG["program"]+" (e.g. bowtie for bowtie1). Specify via aligner.binary!")
	# index
	if "index" not in ALIGNER_CFG:
		if REFERENCE_CFG and "version" in REFERENCE_CFG:
			ALIGNER_CFG["index"] = REFERENCE_CFG["version"]
		else:
			raise WorkflowError("Please provide an index via aligner.index!")
	# index directory
	if "index_directory" not in ALIGNER_CFG:
		if ALIGNER_CFG["program"] == "bwa":
			ALIGNER_CFG["index_directory"] = "/projects/seq-work/user/pipeline/bwa"
		elif ALIGNER_CFG["program"] == "gsnap":
			ALIGNER_CFG["index_directory"] = "/projects/seq-work/user/pipeline/gmap"
		elif ALIGNER_CFG["program"] == "bowtie1":
			ALIGNER_CFG["index_directory"] = "/projects/seq-work/user/pipeline/bowtie1"
		else:
			raise WorkflowError("Please provide an index direcory via aligner.index_directory!")
	# parameter
	if "parameter" not in ALIGNER_CFG:
		if ALIGNER_CFG["program"]=="bwa":
			ALIGNER_CFG["parameter"] = "-M"
		elif ALIGNER_CFG["program"]=="gsnap":
			ALIGNER_CFG["parameter"] = "--use-sarray=1 --input-buffer-size=500000 --output-buffer-size=500000 -B 5 -N 0 -n 1"
		elif ALIGNER_CFG["program"]=="bowtie1":
			ALIGNER_CFG["parameter"] = ""
		else:
			ALIGNER_CFG["parameter"] = ""
	# splice sites
	if "splicesites" not in ALIGNER_CFG:
		if ALIGNER_CFG["program"]=="gsnap":
			if REFERENCE_CFG and "version" in REFERENCE_CFG and ANNOTATION_CFG and "version" in ANNOTATION_CFG:
				ALIGNER_CFG["splicesites"] = "EnsemblGene-"+ANNOTATION_CFG["version"]+".ss." + REFERENCE_CFG["version"]+".iit"
	if "splicesites" in ALIGNER_CFG:
		if ALIGNER_CFG["program"]=="gsnap":
			ALIGNER_CFG["parameter"] = ALIGNER_CFG["parameter"] + " -s " + ALIGNER_CFG["splicesites"]
	# version
	if "version" not in ALIGNER_CFG:
		ALIGNER_CFG["version"] = ""
	# checks
	if ALIGNER_CFG["program"]=="gsnap":
		if not os.path.exists(ALIGNER_CFG["index_directory"]+"/"+ALIGNER_CFG["index"]):
			raise WorkflowError("Could not find the GSNAP index for "+ALIGNER_CFG["index"]+" (aligner.index) in "+ALIGNER_CFG["index_directory"]+" (aligner.index_directory)!")
		if "splicesites" in ALIGNER_CFG and not (os.path.exists(ALIGNER_CFG["index_directory"]+"/"+ALIGNER_CFG["index"]+"/"+ALIGNER_CFG["index"]+".maps/"+ALIGNER_CFG["splicesites"]) or os.path.exists(ALIGNER_CFG["splicesites"])):
			raise WorkflowError("Could not find the GSNAP splice site files for "+ALIGNER_CFG["index_directory"]+" specified via aligner.splicesites")
	if ALIGNER_CFG["program"]=="bwa":
		if not os.path.exists(ALIGNER_CFG["index_directory"]+"/"+ALIGNER_CFG["index"]+".bwt"):
			raise WorkflowError("Could not find the BWA index files for "+ALIGNER_CFG["index"]+" (aligner.index) in "+ALIGNER_CFG["index_directory"]+" (aligner.index_directory)!")
	if ALIGNER_CFG["program"]=="bowtie1":
		if not os.path.exists(ALIGNER_CFG["index_directory"]+"/"+ALIGNER_CFG["index"]+".1.ebwt"):
			raise WorkflowError("Could not find the bowtie1 index files for "+ALIGNER_CFG["index"]+" (aligner.index) in "+ALIGNER_CFG["index_directory"]+" (aligner.index_directory)!")


# lib complexity information needed for the mappingstats calculations ################
LIBCOMPLEXITY_CFG = config.get("libcomplexity",dict())
if "subsample_size" not in LIBCOMPLEXITY_CFG:
	LIBCOMPLEXITY_CFG["subsample_size"] = 1000000


# calc_gene_complexity: calculate gene level complexity stats
# gsnap always triggers calc_gene_complexity = 1 unless explicitly deactivated (libcomplexity.calc_gene_complexity = 0)
if "calc_gene_complexity" not in LIBCOMPLEXITY_CFG:
	if "program" in ALIGNER_CFG and ALIGNER_CFG["program"]=="gsnap":
		LIBCOMPLEXITY_CFG["calc_gene_complexity"] = 1
	else:
		LIBCOMPLEXITY_CFG["calc_gene_complexity"] = 0
 
if "calc_gene_complexity" in LIBCOMPLEXITY_CFG and LIBCOMPLEXITY_CFG["calc_gene_complexity"]==1:
	if "exon_exon_gtf" not in LIBCOMPLEXITY_CFG:
		if ANNOTATION_CFG and "version" in ANNOTATION_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG:
			LIBCOMPLEXITY_CFG["exon_exon_gtf"] = "/projects/seq-work/user/pipeline/libcomplexity/EnsemblGene-"+ANNOTATION_CFG["version"]+"."+REFERENCE_CFG["version"]+".TR.exon-exon.gtf"
		else:
			raise WorkflowError("Cannot determine the libcomplexity.exon_exon_gtf without reference.version plus annotation.version!")
	if not os.path.exists(LIBCOMPLEXITY_CFG["exon_exon_gtf"]):
		raise WorkflowError("Cannot find the libcomplexity.exon_exon_gtf"+LIBCOMPLEXITY_CFG["exon_exon_gtf"]+"!")
	if "gene_relation_txt" not in LIBCOMPLEXITY_CFG:
		if "version" in ANNOTATION_CFG and "version" in REFERENCE_CFG:
			LIBCOMPLEXITY_CFG["gene_relation_txt"] = "/projects/seq-work/user/pipeline/libcomplexity/EnsemblGene-"+ANNOTATION_CFG["version"]+"."+REFERENCE_CFG["version"]+".TR.gene-relation.txt"
		else:
			raise WorkflowError("Cannot determine the libcomplexity.gene_relation_txt with reference.version and annotation.version!")
	if not os.path.exists(LIBCOMPLEXITY_CFG["gene_relation_txt"]):
		raise WorkflowError("Could not find "+LIBCOMPLEXITY_CFG["gene_relation_txt"]+"!")



# strand ################
STRAND = int(config.get("strand",0))

if STRAND!=0 and STRAND!=1 and STRAND!=2:
	raise WorkflowError("The parameter 'strand' must be: 0 - both strands, 1 - plus strand or 2 - minus strand!")


# clean data ############
CLEAN_DATA_CFG = config.get("clean_data",dict())

# programs and jars ############
PROGRAM_CFG = config.get("programs",dict())

# tmp dir ############
TMP_DIR = config.get("tmp","")
if not TMP_DIR:
	TMP_DIR = "${TMPDIR:-.}"

# paths ############
os.environ['PATH'] = os.path.dirname(os.path.abspath(workflow.snakefile)) + "/../scripts/:" + os.path.dirname(os.path.abspath(workflow.snakefile)) + "/../R/:/group/sequencing/Bfx/scripts/common/:" + os.environ['PATH']
os.environ['PYTHONPATH'] = "/group/sequencing/Bfx/scripts/common/dsp/dsp/src/:" + os.environ['PYTHONPATH']
os.environ['R_LIBS_USER']='/share/apps/R/3.3.0/lib64/R/library'

##############################
# names, basenames and files #
##############################


# input (fastq, fastq basename, libraries)
INPUT_CFG = config.get("input",dict())

if "fastq" not in INPUT_CFG:
	INPUT_CFG["fastq"] = [os.path.basename(f) for f in glob.glob("fastq/*.fastq.gz")]
if not INPUT_CFG["fastq"]:
	raise WorkflowError("Could not find FASTQ files in the 'fastq' directory!")

#for f in INPUT_CFG["fastq"]:
#	if not os.path.exists("fastq/"+f):
#		raise WorkflowError("FASTQ file "+f+" seems to be broke!")

INPUT_CFG["fastq_base"] = [re.sub('\.\S+$','',re.sub('\.fastq.gz','',f)) for f in INPUT_CFG["fastq"]]
INPUT_CFG["fastq_base"] = sorted(set(INPUT_CFG["fastq_base"]),key=lambda x: INPUT_CFG["fastq_base"].index(x))
if not INPUT_CFG["fastq_base"]:
	raise WorkflowError("Could not find valid FASTQ files in the 'fastq' directory!")


INPUT_CFG["libraries"] = [re.sub('(_R\d)$','',os.path.basename(f)) for f in INPUT_CFG["fastq_base"]]
INPUT_CFG["libraries"] = sorted(set(INPUT_CFG["libraries"]),key=lambda x: INPUT_CFG["libraries"].index(x))

INPUT_CFG["samples"] = [re.sub('^L\d+_','',l) for l in INPUT_CFG["libraries"]]
INPUT_CFG["samples"] = sorted(set(INPUT_CFG["samples"]),key=lambda x: INPUT_CFG["samples"].index(x))


FASTQ_BASE = INPUT_CFG["fastq_base"]
LIBRARIES = INPUT_CFG["libraries"]
SAMPLES = INPUT_CFG["samples"]


#############
# functions #
#############

# function that loads specific versions of programs via the module system
def module_load(*modules):
	module_str = "module load"
	for m in list(modules):
		module_str += " apps/"+m
		if m in PROGRAM_CFG:
			module_str += "/"+PROGRAM_CFG[m]
	module_str = module_str + " && module list -l || true"
	return module_str

# triggers the automatic removal of the metadata
#import shutil
#onsuccess:
#	shutil.rmtree(".snakemake")			
