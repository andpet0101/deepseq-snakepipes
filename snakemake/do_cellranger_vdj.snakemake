try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

import socket


####################
# Config/Parameter #
####################
CELLRANGER_VDJ_CFG = config.get("cellranger_vdj",dict())

## info about cellranger vdj is needed
if not CELLRANGER_VDJ_CFG:
	raise WorkflowError("Please provide an cellranger_vdj configuration!")

if "reference_dir" not in CELLRANGER_VDJ_CFG:
	if SPECIES and ANNOTATION_CFG and "version" in ANNOTATION_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG and os.path.exists("/projects/seq-work/user/pipeline/cellranger_vdj/"+SPECIES+"/"+REFERENCE_CFG["version"]+".e"+ANNOTATION_CFG["version"]):
		CELLRANGER_VDJ_CFG['reference_dir'] = "/projects/seq-work/user/pipeline/cellranger_vdj/"+SPECIES+"/"+REFERENCE_CFG["version"]+".e"+ANNOTATION_CFG["version"]
	else:
		raise WorkflowError("Please provide a cellranger_vdj reference directory either built-in via annotation.version plus reference.version plus species or via cellranger_vdj.reference_dir!")

if not os.path.exists(CELLRANGER_VDJ_CFG['reference_dir']):
	raise WorkflowError("Could not find the cellranger_vdj reference directory!")

## options for cellranger_vdj aggregate (combines experiments)
if "aggregate" not in CELLRANGER_VDJ_CFG:
	CELLRANGER_VDJ_AGGREGATE_CFG = dict()
else:
	CELLRANGER_VDJ_AGGREGATE_CFG = CELLRANGER_VDJ_CFG["aggregate"]

if "normalize" not in CELLRANGER_VDJ_AGGREGATE_CFG:
	CELLRANGER_VDJ_AGGREGATE_CFG["normalize"] = "mapped"

if CELLRANGER_VDJ_AGGREGATE_CFG["normalize"] not in ["none","mapped","raw"]:
	raise WorkflowError("The parameter 'normalize' can have only values: none, mapped, raw (see cellranger_vdj aggregate doc)!")

if "nosecondary" not in CELLRANGER_VDJ_AGGREGATE_CFG:
	CELLRANGER_VDJ_AGGREGATE_CFG["nosecondary"] = 0

## options for cellranger_vdj count
if "count" not in CELLRANGER_VDJ_CFG:
	CELLRANGER_VDJ_COUNT_CFG = dict()
else:
	CELLRANGER_VDJ_COUNT_CFG = CELLRANGER_VDJ_CFG["count"]

for s in SAMPLES:
	if s not in CELLRANGER_VDJ_COUNT_CFG:
		CELLRANGER_VDJ_COUNT_CFG[s] = dict()
	if "expect-cells" not in CELLRANGER_VDJ_COUNT_CFG[s]:
		CELLRANGER_VDJ_COUNT_CFG[s]["expect-cells"] = 3000
	if "chemistry" not in CELLRANGER_VDJ_COUNT_CFG[s]:
		CELLRANGER_VDJ_COUNT_CFG[s]["chemistry"] = "auto"


## cellranger_vdj version - export if in config otherwise use latest version
if PROGRAM_CFG and "cellranger_vdj" in PROGRAM_CFG:
	os.environ["CELLRANGER_VDJ_VERSION"] = PROGRAM_CFG["cellranger_vdj"]

###########
# Targets #
###########

CELLRANGER_VDJ_FASTQ = {}
for l in LIBRARIES:
	m = re.search("(^L\d+)_(\S+)",l)
	lb = m.group(1)
	sm = m.group(2)
	if sm not in CELLRANGER_VDJ_FASTQ:
		CELLRANGER_VDJ_FASTQ[sm] = []
		CELLRANGER_VDJ_FASTQ[sm].append("cellranger_vdj/fastq/"+sm+"_"+lb+"_L001_R1_001.fastq.gz")
		CELLRANGER_VDJ_FASTQ[sm].append("cellranger_vdj/fastq/"+sm+"_"+lb+"_L001_R2_001.fastq.gz")
		CELLRANGER_VDJ_FASTQ[sm].append("cellranger_vdj/fastq/"+sm+"_"+lb+"_L001_I1_001.fastq.gz")

print(CELLRANGER_VDJ_FASTQ)

#########
# Rules #
#########

shell.prefix("set -ef -o pipefail;")

localrules: run_cellranger_vdj_count,run_cellranger_vdj_aggregate

rule do_all:
	input:
		["cellranger_vdj/"+s+"/cellranger_vdj.done" for s in SAMPLES]


# runs cellranger vdj
rule run_cellranger_vdj:
	input:
		"cellranger_vdj/{sample}/all_fastqs_prepared.done"
	output:
		"cellranger_vdj/{sample}/cellranger_vdj.done"
	log:
		"cellranger_vdj/log/{sample}.cellranger_vdj.log"
	params:
		cellranger_vdj_ref = CELLRANGER_VDJ_CFG['reference_dir']
	shell:
		"""
		(rm -r cellranger_vdj/{wildcards.sample}
		if [[ "$(hostname)" == "login-0-0.local" ]] ;then jobparams="--jobmode=sge --localcores=1 --localmem=1"; else jobparams="--jobmode=local";fi
		jobparams="--jobmode=local"
		cd cellranger_vdj && run_cellranger vdj --id={wildcards.sample} --fastqs=fastq/ --sample={wildcards.sample} --description={wildcards.sample} --reference={params.cellranger_vdj_ref} $jobparams) >& {log}
		touch {output}
		"""


# checks if all fastq files were prepared properly
rule fastqs_prepared_for_cellranger_vdj:
	input: 
		lambda wildcards: CELLRANGER_VDJ_FASTQ[wildcards.sample]
	output: 
		"cellranger_vdj/{sample}/all_fastqs_prepared.done"
	shell: 
		"touch {output}"

# prepares fastq files for cellranger_vdj
#
# 1. R1 and R2 were obtained from the labweb
# 2. R1 and R2 are renamed/linked according cellranger_vdj required file_pattern: %s_*_L[0-9][0-9][0-9]_%s_[0-9][0-9][0-9].fastq* (first %s = sample, second %s = read)
# 3. an I1 file is created which contains the sample index (needed by cellranger_vdj)
#
# important: datasets with same sample but different library names are aggregated
rule prepare_fastq_for_cellranger_vdj:
	input:
		r1="fastq/{libid}_{sample}_R1.fastq.gz",
		r2="fastq/{libid}_{sample}_R2.fastq.gz"
	output:
		r1="cellranger_vdj/fastq/{sample}_{libid}_L001_R1_001.fastq.gz",
		r2="cellranger_vdj/fastq/{sample}_{libid}_L001_R2_001.fastq.gz",
		i1="cellranger_vdj/fastq/{sample}_{libid}_L001_I1_001.fastq.gz"
	log:
		"cellranger_vdj/log/{sample}_{libid}.prepare_fastq_for_cellranger_vdj.log"
	shell:
		"""
		(ln -fs ../../{input.r1} {output.r1}
		ln -fs ../../{input.r2} {output.r2}
		zcat  {output.r1} | gawk 'BEGIN{{FS=":"}}{{if(NR%4==1){{bc=$10;qc=gensub(/./,"A","g",bc)}} if(NR%4==2){{print bc;}}else if(NR%4==0){{print qc}} else{{print;}}}}' | gzip -c > {output.i1}) >& {log}
		"""
	
