import time
import glob
import os
import re
import csv
import collections
import functools


def build_files(csvfilename, single = 1):
  start = False
  direction = ('_R1.fastq.gz', '_R2.fastq.gz')
  temp = []
  with open(csvfilename, 'r') as filein:
    for line in filein:
      if start:
        lib = line.split(',')[0]
        if single == 0:
          temp.extend(['{0}{1}'.format(lib, i) for i in direction])
        else:
          temp.append('{0}{1}'.format(lib, direction[0]))
      
      if line.startswith('Sample_ID'):
        start = True
  return temp


##############################################################
# config file is now static and can be in YML or JSON format #
##############################################################
if os.path.exists("snakemake_config_bcl2fastq.yml"):
	configfile: "snakemake_config_bcl2fastq.yml"
elif os.path.exists("snakemake_config_bcl2fastq.json"):
	configfile: "snakemake_config_bcl2fastq.json"
else:
	raise WorkflowError("Could not find the configuration file (snakemake_config_bcl2fastq.yml/snakemake_config_bcl2fastq.json) located in this directory!")

###################################################
# parameters from the snakemake config and checks #
###################################################
# bcl2fastqversion ##############
bcl2fastqversion = config.get('bcl2fastqversion', '')
if not bcl2fastqversion:
	raise WorkflowError("Please provide the bcl2fastqversion from the module avail listing!")

# fq_storage ################
fq_storage = config.get("fq_storage","")
if not fq_storage:
  fq_storage = '/projects/seq-work/fq_storage/'
  print('Setting fq_storage to default directory: /projects/seq-work/fq_storage')
elif not os.path.exists(fq_storage):
  raise WorkflowError("Please provide a valid fq-storage folder!")
else:
  if not fq_storage[-1] == os.sep: fq_storage = '{0}{1}'.format(fq_storage, os.sep)

# pipelining ################
pipeliningparent = config.get("pipelining","")
if not pipeliningparent:
  pipeliningparent = '/projects/seq-work/pipelining/'
  print('Setting pipelining to default directory: /projects/seq-work/pipelining')
elif not os.path.exists(pipeliningparent):
  raise WorkflowError("Please provide a valid pipelining folder!")
else:
  if not pipeliningparent[-1] == os.sep: pipeliningparent = '{0}{1}'.format(pipeliningparent, os.sep)

# bcl jobs ################
#keys have to be the name of the csv files without the csv
fcdict = config.get('fc',dict())
if fcdict:
  for fc in fcdict:
    fcdict[fc]['pipeliningpath'] = os.path.join(pipeliningparent, fc)
    if not os.path.exists(fcdict[fc]['rawfolder']): raise WorkflowError('{0} - Raw folder not exisiting'.format(fcdict[fc]['rawfolder']))
    if not fcdict[fc]['rawfolder'][-1] == os.sep: fcdict[fc]['rawfolder'] = '{0}{1}'.format(fcdict[fc]['rawfolder'], os.sep)
    fcdict[fc]['parentfolder'] = fcdict[fc]['rawfolder'].rstrip(os.sep).replace(fc, '')
    samplesheethome = fcdict[fc]['samplesheethome'] # get the sample sheet hom
    if not os.path.exists(samplesheethome):
      raise WorkflowError('{0} - Samplesheet directory does not exist: {1}'.format(fc, samplesheethome))
    else:
      csvrun = fcdict[fc]['csvrun']
      for csv in csvrun:
        csvpath = os.path.join(samplesheethome, '.'.join((csv, 'csv')))
        if not os.path.isfile(csvpath): raise WorkflowError('{0} - Samplesheet does not exist: {1}'.format(fc, csvpath))
        fcdict[fc]['csvrun'][csv]['csvpath'] = csvpath
        fcdict[fc]['csvrun'][csv]['basesmask'] = ' '.join(['--use-bases-mask {0}'.format(i) for i in fcdict[fc]['csvrun'][csv]['basesmask'].split(';')])
        fcdict[fc]['csvrun'][csv]['finalfiles'] = build_files(csvpath, fcdict[fc]['single'])
        if not 'additional' in fcdict[fc]['csvrun'][csv]: fcdict[fc]['csvrun'][csv]['additional'] = ' '


## samplesheet ################
## it has to end with the longid of the sequencing run because that's how this id is set
#samplesheethome =  config.get("samplesheethome","")
#if not samplesheethome:
	#raise WorkflowError("Please provide a valid samplesheet directory!")
#elif not os.path.exists(samplesheethome):
	#raise WorkflowError("Please provide a valid samplesheet directory!")
#else:
	#longid = samplesheethome.rstrip(os.sep).split(os.sep)[-1]
	#transid = 'R{0}'.format(longid)
	#if not samplesheethome[-1] == os.sep: samplesheethome = '{0}{1}'.format(samplesheethome, os.sep)

## sequencing ################
#sequencing = config.get("sequencing","")

#if not sequencing:
	#print('Extracting sequencing directory from pipelining folder')
	#if 'HiSeq' in samplesheethome:
		#sequencing = '/projects/sequencing/illumina1/'
	#elif 'NextSeq' in samplesheethome:
		#sequencing = '/projects/sequencing/nextseq-01/'
	#elif 'MiSeq' in samplesheethome:
		#sequencing = '/projects/sequencing/miseq-01/'
	#else:
		#raise WorkflowError("Please provide a valid sequencing directory!")
	#print('Setting sequencing directory to {0}'.format(sequencing))
	#if not sequencing[-1] == os.sep: sequencing = '{0}{1}'.format(sequencing, os.sep)
#elif not os.path.exists(sequencing):
	#raise WorkflowError("Please provide a valid sequencing directory!")
#else:
	#if not sequencing[-1] == os.sep: sequencing = '{0}{1}'.format(sequencing, os.sep)

#if not os.path.exists(os.path.join(sequencing, longid)):
	#raise WorkflowError("Sequencing directory doesn't have flowcell directory")
