import time
import glob
import os
import re
import csv

##############################################################
# config file is now static and can be in YML or JSON format #
##############################################################
if os.path.exists("snakemake_config_bcl2fastq.yml"):
	configfile: "snakemake_config_bcl2fastq.yml"
elif os.path.exists("snakemake_config_bcl2fastq.json"):
	configfile: "snakemake_config_bcl2fastq.json"
else:
	raise WorkflowError("Could not find the configuration file (snakemake_config_bcl2fastq.yml/snakemake_config_bcl2fastq.json) located in this directory!")

###################################################
# parameters from the snakemake config and checks #
###################################################
# bcl2fastqversion ##############
bcl2fastqversion = config.get('bcl2fastqversion', '')
if not bcl2fastqversion:
	raise WorkflowError("Please provide the bcl2fastqversion from the module avail listing!")

# samplesheet ################
# it has to end with the longid of the sequencing run because that's how this id is set
samplesheethome =  config.get("samplesheethome","")
if not samplesheethome:
	raise WorkflowError("Please provide a valid samplesheet directory!")
elif not os.path.exists(samplesheethome):
	raise WorkflowError("Please provide a valid samplesheet directory!")
else:
	longid = samplesheethome.rstrip(os.sep).split(os.sep)[-1]
	transid = 'R{0}'.format(longid)
	if not samplesheethome[-1] == os.sep: samplesheethome = '{0}{1}'.format(samplesheethome, os.sep)

# sequencing ################
sequencing = config.get("sequencing","")

if not sequencing:
	print('Extracting sequencing directory from pipelining folder')
	if 'HiSeq' in samplesheethome:
		sequencing = '/projects/sequencing/illumina1/'
	elif 'NextSeq' in samplesheethome:
		sequencing = '/projects/sequencing/nextseq-01/'
	elif 'MiSeq' in samplesheethome:
		sequencing = '/projects/sequencing/miseq-01/'
	else:
		raise WorkflowError("Please provide a valid sequencing directory!")
	print('Setting sequencing directory to {0}'.format(sequencing))
	if not sequencing[-1] == os.sep: sequencing = '{0}{1}'.format(sequencing, os.sep)
elif not os.path.exists(sequencing):
	raise WorkflowError("Please provide a valid sequencing directory!")
else:
	if not sequencing[-1] == os.sep: sequencing = '{0}{1}'.format(sequencing, os.sep)

if not os.path.exists(os.path.join(sequencing, longid)):
	raise WorkflowError("Sequencing directory doesn't have flowcell directory")

# fq_storage ################
fq_storage = config.get("fq_storage","")
if not fq_storage:
	fq_storage = '/projects/seq-work/fq_storage/'
	print('Setting fq_storage to default directory: /projects/seq-work/fq_storage')
elif not os.path.exists(fq_storage):
	raise WorkflowError("Please provide a valid fq-storage folder!")
else:
	if not fq_storage[-1] == os.sep: fq_storage = '{0}{1}'.format(fq_storage, os.sep)

# pipelining ################
pipelining = config.get("pipelining","")
if not pipelining:
	pipelining = '/projects/seq-work/pipelining/'
	print('Setting pipelining to default directory: /projects/seq-work/pipelining')
elif not os.path.exists(pipelining):
	raise WorkflowError("Please provide a valid pipelining folder!")
else:
	if not pipelining[-1] == os.sep: pipelining = '{0}{1}'.format(pipelining, os.sep)

# bcl jobs ################
#keys have to be the name of the csv files without the csv
bcl_cfg = config.get("bcl",dict())
if bcl_cfg:
	for bcl in bcl_cfg:
		csvpath = '{0}{1}.csv'.format(samplesheethome, bcl)
		if not os.path.exists(csvpath):
			raise WorkflowError('Please provide a valid csv file name ({0} is wrong)'.format(bcl['csv']))
		else:
			bcl_cfg[bcl]['csvpath'] = csvpath
			bcl_cfg[bcl]['pipestorage'] = os.path.join(pipelining, longid, bcl)
			bcl_cfg[bcl]['basesmask'] = ' '.join(['--use-bases-mask {0}'.format(i) for i in bcl_cfg[bcl]['basesmask'].split(';')])
			if not 'additional' in bcl_cfg[bcl]:
				bcl_cfg[bcl]['additional'] = ' '