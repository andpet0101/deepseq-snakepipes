try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

####################
# Config/Parameter #
####################

# info about reference needed
if not REFERENCE_CFG:
	raise WorkflowError("Please provide a reference configuration!")

# info about aligner needed
if not ALIGNER_CFG:
	raise WorkflowError("Please provide an aligner configuration!")

# configuration for variant calling needed
VARIANT_CALLING_CFG = config.get("variant_calling",dict())

if "base_recalibration_vcfs" in VARIANT_CALLING_CFG:
	for f in VARIANT_CALLING_CFG["base_recalibration_vcfs"]:
		if not os.path.exists(f):
			raise WorkflowError("Could not find file "+f+" for variant_calling.base_recalibration_vcfs!")
else:
	VARIANT_CALLING_CFG["base_recalibration_vcfs"] = []

# bed file for target regions
if "target_regions_bed" in VARIANT_CALLING_CFG:
	if not os.path.exists(VARIANT_CALLING_CFG["target_regions_bed"]):
		raise WorkflowError("Could not find file "+VARIANT_CALLING_CFG["target_regions_bed"]+" for variant_calling.target_regions_bed!")
else:
	VARIANT_CALLING_CFG["target_regions_bed"] = ""

###########
# Targets #
###########

VARIANT_CALLING_BAM_BAI_TARGETS = []
for s in LIBRARIES:
	VARIANT_CALLING_BAM_BAI_TARGETS.append(ALIGNER_CFG["program"] + "/" + s + ".variant_calling.bam")
	VARIANT_CALLING_BAM_BAI_TARGETS.append(ALIGNER_CFG["program"] + "/" + s + ".variant_calling.bai")
	if VARIANT_CALLING_CFG["base_recalibration_vcfs"]:
		VARIANT_CALLING_BAM_BAI_TARGETS.append(ALIGNER_CFG["program"] + "/report/data/" + s + ".recal_first_pass.txt")
		VARIANT_CALLING_BAM_BAI_TARGETS.append(ALIGNER_CFG["program"] + "/report/data/" + s + ".recal_second_pass.txt")
	#	VARIANT_CALLING_BAM_BAI_TARGETS.append(ALIGNER_CFG["program"] + "/report/pdf/" + s + ".recalibration.pdf")

#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")

rule do_variant_calling_bam_preprocessing:
	input:
		VARIANT_CALLING_BAM_BAI_TARGETS

# if recalibration vcf has been provided, look for base-recalibrated bam, else look for indel-realigned bam
rule make_variant_calling_bam:
	input:
		bam="{aligner}/{basename}." + ("recal" if VARIANT_CALLING_CFG["base_recalibration_vcfs"] else "indels") + ".bam",
		bai="{aligner}/{basename}." + ("recal" if VARIANT_CALLING_CFG["base_recalibration_vcfs"] else "indels") + ".bai"

	output:
		bam="{aligner}/{basename}.variant_calling.bam",
		bai="{aligner}/{basename}.variant_calling.bai"
	shell:
		"""
		cp -f {input.bam} {output.bam}
		cp -f {input.bai} {output.bai}
		"""

# recalibrate base qualities (if recalibration vcf has been provided)
rule run_GATK_BaseRecalibrator_PrintReads:
	input:
		bam="{aligner}/{basename}.indels.bam",
		bai="{aligner}/{basename}.indels.bai",
		table="{aligner}/report/data/{basename}.recal_first_pass.txt"
	output:
		bam=temp("{aligner}/{basename}.recal.bam"),
		bai=temp("{aligner}/{basename}.recal.bai")
	log:
		"{aligner}/log/{basename}.recal_print_reads.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK","picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx2g"
		GATK -T PrintReads -R {params.reference} -I {input.bam} -BQSR {input.table} -o {output.bam}
		picardtools BuildBamIndex I={output.bam} VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR}) >& {log}
		""" 

# generate before/after recalibration plots (if recalibration vcf has been provided)
rule run_GATK_BaseRecalibrator_generate_plots:
	input:
		before="{aligner}/report/data/{basename}.recal_first_pass.txt",
		after="{aligner}/report/data/{basename}.recal_second_pass.txt"
	output:
		pdf="{aligner}/report/pdf/{basename}.recalibration.pdf"
	log:
		"{aligner}/log/{basename}.recal_plots.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK","R")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T AnalyzeCovariates -R {params.reference} -before {input.before} -after {input.after} -plots {output.pdf}) >& {log}
		"""	

# run base recalibrator a second time to analyse remaining variation (if recalibration vcf has been provided)
rule run_GATK_BaseRecalibrator_post_recalibration:
	input:
		bam="{aligner}/{basename}.indels.bam",
		bai="{aligner}/{basename}.indels.bai",
		table="{aligner}/report/data/{basename}.recal_first_pass.txt"
	output:
		"{aligner}/report/data/{basename}.recal_second_pass.txt"
	log:
		"{aligner}/log/{basename}.recal_second_pass.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		known_sites=" -knownSites ".join(VARIANT_CALLING_CFG["base_recalibration_vcfs"])
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T BaseRecalibrator -R {params.reference} -I {input.bam} -knownSites {params.known_sites} -BQSR {input.table} -o {output}) >& {log}
		"""

# run base recalibrator (if recalibration vcf has been provided)
rule run_GATK_BaseRecalibrator:
	input:
		bam="{aligner}/{basename}.indels.bam",
		bai="{aligner}/{basename}.indels.bai",
		check="{aligner}/vcf_integrity_check"
	output:
		"{aligner}/report/data/{basename}.recal_first_pass.txt"
	log:
		"{aligner}/log/{basename}.recal_first_pass.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		known_sites=" -knownSites ".join(VARIANT_CALLING_CFG["base_recalibration_vcfs"])
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T BaseRecalibrator -R {params.reference} -I {input.bam} -knownSites {params.known_sites} -o {output}) >& {log}
		"""

		
# realigns indels in target intervals
rule run_GATK_IndelRealigner_wgs:
	input:
		bam="{aligner,^bwa|bowtie2|bowtie$}/{basename}.markdup.bam",
		bai="{aligner,^bwa|bowtie2|bowtie$}/{basename}.markdup.bai",
		intervals="{aligner,^bwa|bowtie2|bowtie$}/{basename}.indels.intervals"
	output:
		bam=temp("{aligner,^bwa|bowtie2|bowtie$}/{basename}.indels.bam"),
		bai=temp("{aligner,^bwa|bowtie2|bowtie$}/{basename}.indels.bai")
	log:
		"{aligner}/log/{basename}.indelrealign.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK","picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T IndelRealigner -R {params.reference} -I {input.bam} -targetIntervals {input.intervals} -o {output.bam} --filter_reads_with_N_cigar	
		picardtools BuildBamIndex I={output.bam} VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR}) >& {log}
		"""

# creates target intervals for indel realignment in wgs/exome data
rule run_GATK_RealignerTargetCreator_wgs:
	input:
		bam="{aligner,^bwa|bowtie2|bowtie$}/{basename}.markdup.bam",
		bai="{aligner,^bwa|bowtie2|bowtie$}/{basename}.markdup.bai"
	output:
		temp("{aligner,^bwa|bowtie2|bowtie$}/{basename}.indels.intervals")
	log:
		"{aligner,^bwa|bowtie2|bowtie$}/log/{basename}.indelrealign.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T RealignerTargetCreator -R {params.reference} -I {input.bam} -o {output}) >& {log}
		"""

rule run_GATK_IndelRealigner_rnaseq:
	input:
		bam="{aligner,^gsnap|STAR$}/{basename}.splitN.bam",
		bai="{aligner,^gsnap|STAR$}/{basename}.splitN.bai",
		intervals="{aligner,^gsnap|STAR$}/{basename}.indels.intervals"
	output:
		bam=temp("{aligner,^gsnap|STAR$}/{basename}.indels.bam"),
		bai=temp("{aligner,^gsnap|STAR$}/{basename}.indels.bai")
	log:
		"{aligner,^gsnap|STAR$}/log/{basename}.indelrealign.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK","picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T IndelRealigner -R {params.reference} -I {input.bam} -targetIntervals {input.intervals} -o {output.bam} --filter_reads_with_N_cigar	
		picardtools BuildBamIndex I={output.bam} VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR}) >& {log}
		"""

# creates target intervals for indel realignment in rnaseq data
rule run_GATK_RealignerTargetCreator_rnaseq:
	input:
		bam="{aligner,^gsnap|STAR$}/{basename}.splitN.bam",
		bai="{aligner,^gsnap|STAR$}/{basename}.splitN.bai"
	output:
		temp("{aligner,^gsnap|STAR$}/{basename}.indels.intervals")
	log:
		"{aligner,^gsnap|STAR$}/log/{basename}.indelrealign.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T RealignerTargetCreator -R {params.reference} -I {input.bam} -o {output}) >& {log}
		"""

# splits rnaseq alignments with the cigar operator N (indicating introns)
rule run_GATK_SplitNCigarReads:
	input:
		bam="{aligner,^gsnap|STAR$}/{basename}.markdup.bam",
		bai="{aligner,^gsnap|STAR$}/{basename}.markdup.bai"
	output:
		bam=temp("{aligner,^gsnap|STAR$}/{basename}.splitN.bam"),
		bai=temp("{aligner,^gsnap|STAR$}/{basename}.splitN.bai")
	log:
		"{aligner,^gsnap|STAR$}/log/{basename}.splitN.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa"
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK","picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g"
		GATK -T SplitNCigarReads -R {params.reference} -I {input.bam} -o {output.bam} -rf ReassignOneMappingQuality -RMQF 255 -RMQT 60 -U ALLOW_N_CIGAR_READS -fixNDN
		picardtools BuildBamIndex I={output.bam} VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR}) >& {log}
		"""

# marks read duplicates
rule run_MarkDuplicates:
	input:
		bam="{aligner}/{basename}.fixmate.bam",
		bai="{aligner}/{basename}.fixmate.bai"
	output:
		bam=temp("{aligner}/{basename}.markdup.bam"),
		bai=temp("{aligner}/{basename}.markdup.bai"),
		csv="{aligner}/report/data/{basename}.markdup.txt"
	log:
		"{aligner}/log/{basename}.markdup.log"
	shell:
		"\n\t\t("+module_load("picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx8g -XX:-UseGCOverheadLimit"
		picardtools MarkDuplicates I={input.bam} O={output.bam} M={output.csv} REMOVE_DUPLICATES=false CREATE_INDEX=true TAGGING_POLICY=All TMP_DIR={TMP_DIR} VALIDATION_STRINGENCY=SILENT) >& {log}
		"""

# fixes the mate information in wgs/exome data
rule run_FixMateInformation_wgs:
	input:
		bam="{aligner,^bwa|bowtie2|bowtie$}/{basename}"+(".target_regions" if VARIANT_CALLING_CFG["target_regions_bed"] else "")+".bam",
		bai="{aligner,^bwa|bowtie2|bowtie$}/{basename}"+(".target_regions" if VARIANT_CALLING_CFG["target_regions_bed"] else "")+".bai"
	output:
		bam=temp("{aligner,^bwa|bowtie2|bowtie$}/{basename}.fixmate.bam"),
		bai=temp("{aligner,^bwa|bowtie2|bowtie$}/{basename}.fixmate.bai")
	log:
		"{aligner,^bwa|bowtie2|bowtie$}/log/{basename}.fixmate.log"
	shell:
		"\n\t\t("+module_load("picard_tools")+		
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx2g"
		picardtools FixMateInformation I={input.bam} O={output.bam} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT SO=coordinate) >& {log}
		"""


# fixes the mate information in rnaseq data
# removes problematic reads with the tags listed below
# converts problematic CIGAR strings xNyI and xIyN into xDyI and xIyD, respectively 
rule run_FixMateInformation_rnaseq:
	input:
		bam="{aligner,^gsnap|STAR$}/{basename}"+(".target_regions" if VARIANT_CALLING_CFG["target_regions_bed"] else "")+".bam",
		bai="{aligner,^gsnap|STAR$}/{basename}"+(".target_regions" if VARIANT_CALLING_CFG["target_regions_bed"] else "")+".bai"
	output:
		bam=temp("{aligner,^gsnap|STAR$}/{basename}.fixmate.bam"),
		bai=temp("{aligner,^gsnap|STAR$}/{basename}.fixmate.bai")
	log:
		"{aligner,^gsnap|STAR$}/log/{basename}.fixmate.log"
	shell:
		"\n\t\t("+module_load("samtools","picard_tools")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx2g"
		samtools view -h {input.bam} | egrep -v "XO:Z:(CT|CC|PM|PS|PI|PL|UT|HT|HM|CM|CC|UM)" | fix_adajacent_N_I_cigar_ops.pl | picardtools FixMateInformation I=/dev/stdin O={output.bam} CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR} SO=coordinate) >& {log}
		"""

# this command subsets reads based on target regions
rule run_GATK_SubsetTargetRegion_PrintReads:
	input:
		bam="{aligner}/{basename}.bam"
	output:
		bam="{aligner}/{basename}.target_regions.bam",
		bai="{aligner}/{basename}.target_regions.bai"
	log:
		"{aligner}/log/{basename}.target_regions.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		target_region="--interval_padding 1000 -L "+VARIANT_CALLING_CFG["target_regions_bed"] if VARIANT_CALLING_CFG["target_regions_bed"] else ""
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		export JAVA_OPTIONS="-Djava.io.tmpdir={TMP_DIR} -Xmx2g"
		GATK -T PrintReads -R {params.reference} -I {input.bam} -o {output.bam} {params.target_region}
		picardtools BuildBamIndex I={output.bam} VALIDATION_STRINGENCY=SILENT TMP_DIR={TMP_DIR}) >& {log}	
		"""

# checks the integrity of the VCF files provided for recalibration
rule check_base_recalibration_vcfs:
	output:
		temp("{aligner}/vcf_integrity_check")
	log:
		"{aligner}/log/vcf_integrity_check.log"
	params:
		reference=REFERENCE_CFG["path"]+".fa",
		vcfs=" ".join(VARIANT_CALLING_CFG["base_recalibration_vcfs"])
		
	priority:
		100
	shell:
		"\n\t\t("+module_load("GenomeAnalysisTK")+
		"""
		for vcf in {params.vcfs};do GATK -T ValidateVariants -R {params.reference} -V $vcf --validationTypeToExclude ALL;done) 2>&1 | tee {output} >& {log}
		"""
