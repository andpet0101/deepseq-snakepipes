try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

####################
# Config/Parameter #
####################

# info about aligner is needed
if not ALIGNER_CFG:
	raise WorkflowError("Please provide an aligner configuration!")

# info about rnaseqc is also needed but can be inferred
RNASEQC_CFG = config.get("rnaseqc",dict())
if "gtf" not in RNASEQC_CFG:
	if SPECIES and ANNOTATION_CFG and "version" in ANNOTATION_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG:
		RNASEQC_CFG["gtf"] = "/projects/seq-work/user/pipeline/rnaseqqc/"+SPECIES+"/"+REFERENCE_CFG["version"]+"/EnsemblGene-"+ANNOTATION_CFG["version"]+"."+REFERENCE_CFG["version"]+".TR.rnaseqqc.gtf"
	else:
		raise WorkflowError("Please provide an annotation file for RNA-SeQC either built-in via annotation.version plus reference.version plus species or as GTF file via rnaseqc.gtf!")
if not os.path.exists(RNASEQC_CFG["gtf"]):
	raise WorkflowError("Could not find the rnaseqc.gtf file "+RNASEQC_CFG["gtf"]+"!")
if "rRNA_list" not in RNASEQC_CFG:
	if SPECIES and REFERENCE_CFG and "version" in REFERENCE_CFG:
		RNASEQC_CFG["rRNA_list"] = "/projects/seq-work/user/pipeline/rnaseqqc/"+SPECIES+"/"+REFERENCE_CFG["version"]+"/"+REFERENCE_CFG["version"]+".rRNA.rnaseqc.list"
	else:
		raise WorkflowError("Please provide an rRNA list file for RNA-SeQC either built-in via reference.version plus species or as rRNA list file via rnaseqc.rRNA_list!")
if not os.path.exists(RNASEQC_CFG["rRNA_list"]):
	raise WorkflowError("Could not find the rnaseqc.rRNA_list file "+RNASEQC_CFG["rRNA_list"]+"!")


# bam and bai files are needed
BAM_FILES = [ALIGNER_CFG["program"] + "/" + s + ".bam" for s in LIBRARIES]
BAI_FILES = [ALIGNER_CFG["program"] + "/" + s + ".bai" for s in LIBRARIES]


###########
# Targets #
###########

# files produced
RNASEQC_FILES = ["gapLengthHist_low.png","index.html","meanCoverage_medium.png","meanCoverageNorm_low.txt","refGene.txt.idx","gapLengthHist_low.txt",
	"meanCoverage_high.png","meanCoverage_medium.txt","meanCoverageNorm_medium.png","report.html","countMetrics.html","gapLengthHist_medium.png","meanCoverage_high.txt","meanCoverageNorm_high.png",
	"meanCoverageNorm_medium.txt","gapLengthHist_high.png","gapLengthHist_medium.txt","meanCoverage_low.png","meanCoverageNorm_high.txt","metrics.tsv","gapLengthHist_high.txt","genes.rpkm.gct",
	"meanCoverage_low.txt","meanCoverageNorm_low.png","refGene.txt"]

# no correlation plots will be produced if there is only one library
if len(LIBRARIES) > 1:
	RNASEQC_FILES.extend(["corrMatrixPearson.txt","corrMatrixSpearman.txt"])

RNASEQC_FILES = expand("rnaseqc/{f}",f=RNASEQC_FILES)
RNASEQC_TARGETS = RNASEQC_FILES + ["report/data/"+PROJECT+"_rnaseqc_alignment_rnaseqc_1.csv","report/data/"+PROJECT+"_rnaseqc_libprofile_rnaseqc_1.csv","report/"+PROJECT+"_rnaseqc_alignment_rnaseqc_1.tex","report/"+PROJECT+"_rnaseqc_libprofile_rnaseqc_1.tex"]


#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")

# simple rules are run on the head node
localrules: make_rnaseqc_samplefile,extract_rnaseqc_stats

rule do_rnaseqc:
	input:
		RNASEQC_TARGETS

rule extract_rnaseqc_stats:
	input:
		"rnaseqc/index.html"
	output:
		"report/data/" + PROJECT + "_rnaseqc_alignment_rnaseqc_1.csv",
		"report/data/" + PROJECT + "_rnaseqc_libprofile_rnaseqc_1.csv",
		"report/" + PROJECT + "_rnaseqc_alignment_rnaseqc_1.tex",
		"report/" + PROJECT + "_rnaseqc_libprofile_rnaseqc_1.tex"
	log:
		"rnaseqc/log/extract_rnaseqc_stats.log"
	shell:
		"\n\t\t("+module_load("python")+
		"""
		extract_tables_rnaseqc.py -f {input} -b {PROJECT} -r report) >& {log}
		"""
	

rule run_rnaseqc:
	input:
		bams=BAM_FILES,
		bais=BAI_FILES,
		samplefile="rnaseqc/sampleFile.txt"
	output:
		RNASEQC_FILES
	log:
		"rnaseqc/log/run_rnaseqc.log"
	priority:
		-1
	shell:
		"\n\t\t("+module_load("samtools","rna-seqc")+
		"""
		export JAVA_OPTIONS="-Xmx40G"
		[ $(samtools view -f 1 -c {input.bams[0]}) -eq 0 ] && PARAM=\" -singleEnd \" || PARAM=\"\"
		RNA-SeQC -gatkFlags "-S SILENT" -o rnaseqc -r {REFERENCE_CFG[path]}.fa -s {input.samplefile} $PARAM -t {RNASEQC_CFG[gtf]} -rRNA {RNASEQC_CFG[rRNA_list]} || true) >& {log}
		"""

rule make_rnaseqc_samplefile:
	input:
		bams=BAM_FILES
	output:
		"rnaseqc/sampleFile.txt"
	run:
		with open(output[0], 'w') as out:
			out.write("Sample ID\tBam File\tNotes\n")
			for f in sorted(input.bams):
				i = re.sub('\.bam','',re.sub('^L\d+_','',os.path.basename(f)))
				out.write(i + "\t" + os.path.abspath(f) + "\t" + PROJECT + "\n")


