try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"


####################
# Config/Parameter #
####################

CONTAMINATION_CFG = config.get("contamination_screen",dict())

if "databases" not in CONTAMINATION_CFG:
	CONTAMINATION_CFG["databases"] = {"Human" : "hg38","Mouse" : "mm10","Drosophila" : "dm6","Zebrafish" : "GRCz10","E.coli" : "U00096","ERCC" : "ERCC92","UniVec" : "UniVec_Core", 'InHouse' : 'inhouse'}

if len(CONTAMINATION_CFG["databases"].keys()) == 0:
	raise WorkflowError("Please specify a putative contamination species!")

if "aligner" in CONTAMINATION_CFG:
	if CONTAMINATION_CFG["aligner"] not in ["bowtie2","bwa","bowtie"]:
		raise WorkflowError("Only the aligner bowtie, bowtie2 and bwa are support for the contamination screen workflow!")
else:
	CONTAMINATION_CFG["aligner"] = "bowtie2"


for species in list(CONTAMINATION_CFG["databases"].keys()):
	if CONTAMINATION_CFG["aligner"] == "bowtie2":
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".1.bt2") and os.path.exists("/projects/seq-work/user/pipeline/bowtie2/"+CONTAMINATION_CFG["databases"][species]+".1.bt2"):
			CONTAMINATION_CFG["databases"][species] = "/projects/seq-work/user/pipeline/bowtie2/"+CONTAMINATION_CFG["databases"][species]
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".1.bt2"):
			raise WorkflowError("Could not find files for bowtie2 index "+CONTAMINATION_CFG["databases"][species]+" (if not index is not present in /projects/seq-work/user/pipeline/bowtie2/, specify an absolute path!")
	elif CONTAMINATION_CFG["aligner"] == "bwa":
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".bwt") and os.path.exists("/projects/seq-work/user/pipeline/bwa/"+CONTAMINATION_CFG["databases"][species]+".bwt"):
			CONTAMINATION_CFG["databases"][species] = "/projects/seq-work/user/pipeline/bwa/"+CONTAMINATION_CFG["databases"][species]
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".bwt"):
			raise WorkflowError("Could not find files for bwa index "+CONTAMINATION_CFG["databases"][species]+" (if not index is not present in /projects/seq-work/user/pipeline/bwa/, specify an absolute path!")
	elif CONTAMINATION_CFG["aligner"] == "bowtie":
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".1.ebwt") and os.path.exists("/projects/seq-work/user/pipeline/bowtie1/"+CONTAMINATION_CFG["databases"][species]+".1.ebwt"):
			CONTAMINATION_CFG["databases"][species] = "/projects/seq-work/user/pipeline/bowtie1/"+CONTAMINATION_CFG["databases"][species]
		if not os.path.exists(CONTAMINATION_CFG["databases"][species]+".1.ebwt"):
			raise WorkflowError("Could not find files for bowtie index "+CONTAMINATION_CFG["databases"][species]+" (if not index is not present in /projects/seq-work/user/pipeline/bowtie1/, specify an absolute path!")

if "aligner_params" in CONTAMINATION_CFG:
	CONTAMINATION_CFG["aligner_params"] = "--"+CONTAMINATION_CFG["aligner"]+" '"+CONTAMINATION_CFG["aligner_params"]+"'"
else:
	CONTAMINATION_CFG["aligner_params"] =  ""

###########
# Targets #
###########

CONTAMINATION_TARGETS = ["fastq_screen/report/data/"+PROJECT+"_contamination_database_specific_hits.csv","fastq_screen/report/data/"+PROJECT+"_no_hits.csv","fastq_screen/report/pdf/"+PROJECT+"_contamination_database_specific_hits.pdf","fastq_screen/report/pdf/"+PROJECT+"_no_hits.pdf"]

##########
# Checks #
##########


#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")

rule do_contamination_screen:
	input:
		CONTAMINATION_TARGETS

rule summarise_fastq_screen:
	input:
		["fastq_screen/report/data/"+l+"_R1_screen.csv" for l in INPUT_CFG["libraries"]]
	output:
		"fastq_screen/report/pdf/"+PROJECT+"_contamination_database_specific_hits.pdf",
		"fastq_screen/report/pdf/"+PROJECT+"_no_hits.pdf",
		"fastq_screen/report/data/"+PROJECT+"_contamination_database_specific_hits.csv",
		"fastq_screen/report/data/"+PROJECT+"_no_hits.csv",
		
	log:
		"fastq_screen/log/summarise_fastq_screen.log"
	shell:
		"\n\t\t("+module_load("R")+
		"""
		summarise_fastq_screen.R {PROJECT} fastq_screen/report/data fastq_screen/report/pdf) >& {log}
		"""


rule run_fastq_screen:
	input:
		fq="fastq/{basename}.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}.fastq.gz",
		conf="fastq_screen/fastq_screen.conf"
	output:
		png="fastq_screen/{basename}_screen.png",
		txt="fastq_screen/{basename}_screen.txt",
		csv="fastq_screen/report/data/{basename}_screen.csv",
		png2="fastq_screen/report/png/{basename}_screen.png"
	log:
		"fastq_screen/log/{basename}_screen.log"
	threads:
		4
	params:
		aligner=CONTAMINATION_CFG["aligner"],
		aligner_params=CONTAMINATION_CFG["aligner_params"]
	shell:
		"\n\t\t("+module_load("fastq_screen","bowtie2","bwa","bowtie")+
		"""
		ln -s ../{input.fq} fastq_screen/{wildcards.basename}.fastq.gz
		fastq_screen --outdir fastq_screen/ --threads ${{NSLOTS:-{threads}}} --conf {input.conf} --aligner {params.aligner} {params.aligner_params} --force fastq_screen/{wildcards.basename}.fastq.gz) >& {log}
		cp {output.txt} {output.csv}
		cp {output.png} {output.png2}
		rm fastq_screen/{wildcards.basename}.fastq.gz
		"""

rule prepare_fastq_screen_conf:
	output:
		"fastq_screen/fastq_screen.conf"
	run:
		with open(output[0], 'w') as outstream:
			outstream.write("THREADS\t4\n")
			for species in list(CONTAMINATION_CFG["databases"].keys()):
				outstream.write("DATABASE\t"+species+"\t"+CONTAMINATION_CFG["databases"][species]+"\n")


