try:
	GENERAL_SETTINGS_INCLUDED
except NameError: 
	include: "general_settings.snakemake"

####################
# Config/Parameter #
####################

# we need at least info about aligner
if not ALIGNER_CFG:
	raise WorkflowError("Please provide an aligner configuration!")

LIBCOMPLEXITY_CFG = config.get("libcomplexity",dict())
if "subsample_size" not in LIBCOMPLEXITY_CFG:
	LIBCOMPLEXITY_CFG["subsample_size"] = 1000000
if "calc_gene_complexity" not in LIBCOMPLEXITY_CFG:
	LIBCOMPLEXITY_CFG["calc_gene_complexity"] = 0

if ALIGNER_CFG["program"]=="gsnap" or LIBCOMPLEXITY_CFG["calc_gene_complexity"]==1:
	LIBCOMPLEXITY_CFG["calc_gene_complexity"] = 1
	if "exon_exon_gtf" not in LIBCOMPLEXITY_CFG:
		if ANNOTATION_CFG and "version" in ANNOTATION_CFG and REFERENCE_CFG and "version" in REFERENCE_CFG:
			LIBCOMPLEXITY_CFG["exon_exon_gtf"] = "/projects/seq-work/user/pipeline/libcomplexity/EnsemblGene-"+ANNOTATION_CFG["version"]+"."+REFERENCE_CFG["version"]+".TR.exon-exon.gtf"
		else:
			raise WorkflowError("Cannot determine the libcomplexity.exon_exon_gtf without reference.version plus annotation.version!")
	if not os.path.exists(LIBCOMPLEXITY_CFG["exon_exon_gtf"]):
		raise WorkflowError("Cannot find the libcomplexity.exon_exon_gtf"+LIBCOMPLEXITY_CFG["exon_exon_gtf"]+"!")


BEDTOOLS_STRAND_PARAM = "" if STRAND==0 else "-s" if STRAND==1 else "-S"
EXON_EXON_GTF_PARAM = LIBCOMPLEXITY_CFG["exon_exon_gtf"] if "exon_exon_gtf" in LIBCOMPLEXITY_CFG else ""
CALC_GENE_COMPLEXITY = LIBCOMPLEXITY_CFG["calc_gene_complexity"]

###########
# Targets #
###########

BAM_FILES = [ALIGNER_CFG["program"] + "/" + s + ".bam" for s in LIBRARIES]
BAI_FILES = [ALIGNER_CFG["program"] + "/" + s + ".bam.bai" for s in LIBRARIES]

MAPPING_STATS_FILES = []
for s in LIBRARIES:
	MAPPING_STATS_FILES.append(ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_" + s + "_alignment_stats.csv")
	MAPPING_STATS_FILES.append(ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_" + s + "_alignment_complexity.csv")

MAPPING_PLOTS_FILES = []
for s in ["subsample_number_1","complete_number_1","subsample_percent_1","complete_percent_1"]:
	file_base = PROJECT + "_alignmentcomplexity_" + s + "." + ("Complete_Gene" if LIBCOMPLEXITY_CFG["calc_gene_complexity"] else "Complete") + "." + ALIGNER_CFG["program"]
	MAPPING_PLOTS_FILES.append(ALIGNER_CFG["program"] + "/report/pdf/" + file_base + ".pdf")
	MAPPING_PLOTS_FILES.append(ALIGNER_CFG["program"] + "/report/picture/" + file_base + ".png")

MAPPING_TARGETS = [BAM_FILES,BAI_FILES,MAPPING_PLOTS_FILES]


#########
# Rules #
#########

shell.prefix("set -euf -o pipefail;")
ruleorder: run_gsnap_paired > run_gsnap_single
ruleorder: run_bwa_paired > run_bwa_single


rule do_mapping:
	input:
		MAPPING_TARGETS

rule make_mapping_plots:
	input:
		MAPPING_STATS_FILES
	output:
		MAPPING_PLOTS_FILES
	log:
		ALIGNER_CFG["program"] + "/log/figures_mappingstatistics.log"
	shell:
		module_load("python","R")+
		"""
		export PYTHONPATH=/group/sequencing/Bfx/scripts/mathias/dsp/dsp/src:$PYTHONPATH
		/group/sequencing/Bfx/scripts/common/figures_mappingstatistics.py -i {ALIGNER_CFG[program]}/report/data -r {ALIGNER_CFG[program]}/report -s """ + ("Complete Gene" if CALC_GENE_COMPLEXITY==1 else "Complete")  + """ -b {PROJECT}) >& {log}
		"""

if CALC_GENE_COMPLEXITY==1:
	rule calculate_mapping_stats:
		input:
			bam=ALIGNER_CFG["program"] + "/{basename}.bam"
		output:
			stats=ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_{basename}_alignment_stats.csv",
			complexity=ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_{basename}_alignment_complexity.csv"
		log:
			ALIGNER_CFG["program"] + "/log/" + PROJECT + "_{basename}.calculate_mapping_stats.log"
		shell:
			module_load("python","bedtools","samtools")+
			"""
			export PYTHONPATH=/group/sequencing/Bfx/scripts/mathias/dsp/dsp/src:$PYTHONPATH
			samtools view -F 0x100 -b {input.bam} | /group/sequencing/Bfx/scripts/common/calculate_mappingstatistics.py -b {PROJECT} -f -m -l -o {ALIGNER_CFG[program]}/report -s Complete -i {LIBCOMPLEXITY_CFG[subsample_size]}
			samtools view -F 0x100 -b {input.bam} | bedtools intersect {BEDTOOLS_STRAND_PARAM} -u -f 0.5 -split -a stdin -b {EXON_EXON_GTF_PARAM} | /group/sequencing/Bfx/scripts/common/calculate_mappingstatistics.py -b {PROJECT} -f -l -o {ALIGNER_CFG[program]}/report -s Gene -i {LIBCOMPLEXITY_CFG[subsample_size]}) &> {log}
			"""
else:
	rule calculate_mapping_stats:
		input:
			bam=ALIGNER_CFG["program"] + "/{basename}.bam"
		output:
			stats=ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_{basename}_alignment_stats.csv",
			complexity=ALIGNER_CFG["program"] + "/report/data/" + PROJECT + "_{basename}_alignment_complexity.csv"
		log:
			ALIGNER_CFG["program"] + "/log/" + PROJECT + "_{basename}.calculate_mapping_stats.log"
		shell:
			module_load("python","bedtools","samtools")+
			"""
			export PYTHONPATH=/group/sequencing/Bfx/scripts/mathias/dsp/dsp/src:$PYTHONPATH
			samtools view -F 0x100 -b {input.bam} | /group/sequencing/Bfx/scripts/common/calculate_mappingstatistics.py -b {PROJECT} -f -m -l -o {ALIGNER_CFG[program]}/report -s Complete -i {LIBCOMPLEXITY_CFG[subsample_size]}) >& {log}
			"""


rule index_bam:
	input:
		"{basename}.bam"
	output:
		"{basename}.bam.bai"
	log:
		"{basename}.bam.bai.log"
	shell:
		module_load("samtools")+
		"""
		samtools index {input}) >& {log}
		"""	

#######
# BWA #
#######

rule run_bwa_single:
	input:
		"fastq/{basename}_R1.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R1.fastq.gz"
	output:
		bam="bwa/{basename}.bam"
	log:
		"bwa/log/{basename}.log"
	threads:
		8
	shell:
		module_load("bwa","samtools")+
		"""
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		{ALIGNER_CFG[binary]} mem -R '@RG\\tID:'$RG'\\tSM:'$SM'\\tLB:'$LB'\\tPL:ILLUMINA' -t `expr ${{NSLOTS:-{threads}}} - 2` {ALIGNER_CFG[parameter]} {ALIGNER_CFG[index_directory]}/{ALIGNER_CFG[index]} {input} | \
		samtools sort -O bam -T {TMP_DIR}/{wildcards.basename} -o {output} -@ 2 -) >& {log}
		"""

rule run_bwa_paired:
	input:
		fq1="fastq/{basename}_R1.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R1.fastq.gz",
		fq2="fastq/{basename}_R2.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R2.fastq.gz"
	output:
		bam="bwa/{basename}.bam"
	log:
		"bwa/log/{basename}.log"
	threads:
		8
	shell:
		module_load("bwa","samtools")+
		"""
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		{ALIGNER_CFG[binary]} mem -R '@RG\\tID:'$RG'\\tSM:'$SM'\\tLB:'$LB'\\tPL:ILLUMINA' -t `expr ${{NSLOTS:-{threads}}} - 2` {ALIGNER_CFG[parameter]} {ALIGNER_CFG[index_directory]}/{ALIGNER_CFG[index]} {input} | \
		samtools sort -O bam -T {TMP_DIR}/{wildcards.basename} -o {output} -@ 2 -) >& {log}
		"""


#########
# gsnap #
#########


rule run_gsnap_single:
	input:
		fq="fastq/{basename}_R1.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R1.fastq.gz"

	output:
		bam="gsnap/{basename}.bam"
	log:
		"gsnap/log/{basename}.log"
	threads:
		8
	shell:
		module_load("gmap","samtools")+
		"""
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		{ALIGNER_CFG[binary]} -D {ALIGNER_CFG[index_directory]} -d {ALIGNER_CFG[index]} --gunzip -A sam -t `expr ${{NSLOTS:-{threads}}} - 2` {ALIGNER_CFG[parameter]} --read-group-id=\"$RG\" --read-group-name=\"$SM\" --read-group-library=\"$LB\" --read-group-platform=illumina {input.fq} >  {TMP_DIR}/{wildcards.basename}.sam;
		sam_sort -D {ALIGNER_CFG[index_directory]} -d {ALIGNER_CFG[index]} --sort2=orig --mark-first  {TMP_DIR}/{wildcards.basename}.sam | samtools view -bS - > {output.bam}) >& {log}
		"""

rule run_gsnap_paired:
	input:
		fq1="fastq/{basename}_R1.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R1.fastq.gz",
		fq2="fastq/{basename}_R2.clean.fastq.gz" if CLEAN_DATA_CFG else "fastq/{basename}_R2.fastq.gz",
	output:
		bam="gsnap/{basename}.bam",
		transloc="gsnap/{basename}.transloc.bam"
	log:
		"gsnap/log/{basename}.log"
	threads:
		8
	shell:
		module_load("gmap","samtools")+
		"""
		RG="{wildcards.basename}";LB="{wildcards.basename}";SM="{wildcards.basename}"
		if [[ "{wildcards.basename}" =~ ^(L[0-9]+)_(.+) ]];then LB="${{BASH_REMATCH[1]}}";SM="${{BASH_REMATCH[2]}}";fi
		{ALIGNER_CFG[binary]} -D {ALIGNER_CFG[index_directory]} -d {ALIGNER_CFG[index]} --gunzip -A sam -t `expr ${{NSLOTS:-{threads}}} - 2` {ALIGNER_CFG[parameter]} --read-group-id=\"$RG\" --read-group-name=\"$SM\" --read-group-library=\"$LB\" --read-group-platform=illumina {input.fq1} {input.fq2} > {TMP_DIR}/{wildcards.basename}.sam;
		sam_sort -D {ALIGNER_CFG[index_directory]} -d {ALIGNER_CFG[index]} --sort2=orig --mark-first {TMP_DIR}/{wildcards.basename}.sam | samtools view -bS - | java -jar /group/sequencing/Bfx/scripts/mathias/deep_seq_pipeline_java/jar/SplitGsnapTranslocation.jar I=/dev/stdin ON={output.bam} OT={output.transloc} SO=coordinate TMP_DIR={TMP_DIR}) >& {log}
		"""

